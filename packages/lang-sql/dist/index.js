import { ASTLiteral, ASTFunction, ASTOperator, DortDB } from '@dortdb/core';
import require$$0 from '@ts-jison/parser';
import require$$1 from '@ts-jison/lexer';

var sql = {};

const { JisonParser, o } = require$$0;
class sqlParser extends JisonParser {
  constructor(yy = {}, lexer = new sqlLexer(yy)) {
    super(yy, lexer);
    this.symbols_ = { "error": 2, "scope-exit": 3, "RBRA": 4, "RPAR": 5, "RCUR": 6, "LANGEXIT": 7, "root": 8, "statement-list": 9, "semicolon_opt": 10, "statement": 11, "SEMICOLON": 12, "select-stmt": 13, "values_clause": 14, "orderby-clause_opt": 15, "limit-clause_opt": 16, "with-clause": 17, "select-set-list": 18, "select-set": 19, "SELECT": 20, "distinct-clause_opt": 21, "select-list": 22, "FROM": 23, "table-item": 24, "where-clause_opt": 25, "groupby-clause_opt": 26, "having-clause_opt": 27, "window-clause_opt": 28, "select-set-or-subquery": 29, "LPAR": 30, "subquery": 31, "setop": 32, "setop-modifier": 33, "ALL": 34, "DISTINCT": 35, "expression": 36, "alias_opt": 37, "COMMA": 38, "one-table": 39, "scoped-id": 40, "table-alias_opt": 41, "simple-function-call": 42, "table-function-call": 43, "WITH": 44, "ORDINALITY": 45, "ROWS": 46, "simple-function-call-list": 47, "with-ordinality_opt": 48, "recursive_opt": 49, "with-query-cycle-list": 50, "with-query-name": 51, "ID": 52, "AS": 53, "materialized_opt": 54, "column-list": 55, "with-query-search": 56, "SEARCH": 57, "with-search-type": 58, "FIRST": 59, "BY": 60, "SET": 61, "with-query-cycle": 62, "CYCLE": 63, "USING": 64, "TO": 65, "DEFAULT": 66, "DEPTH": 67, "BREADTH": 68, "VALUES": 69, "expression-list_opt-list": 70, "join-type": 71, "lateral_opt": 72, "join-condition_opt": 73, "CROSS": 74, "JOIN": 75, "NATURAL": 76, "INNER": 77, "LEFT": 78, "outer_opt": 79, "RIGHT": 80, "FULL": 81, "join-condition": 82, "ON": 83, "where-clause": 84, "WHERE": 85, "groupby-clause": 86, "GROUP": 87, "expression-list": 88, "ROLLUP": 89, "CUBE": 90, "GROUPINGSETS": 91, "window-clause": 92, "WINDOW": 93, "window-spec-list": 94, "window-spec": 95, "having-clause": 96, "HAVING": 97, "distinct-clause": 98, "UNION": 99, "INTERSECT": 100, "EXCEPT": 101, "orderby-order": 102, "ASC": 103, "DESC": 104, "orderby-nulls": 105, "NULLS": 106, "LAST": 107, "orderby-clause": 108, "ORDERBY": 109, "orderby-order_opt": 110, "orderby-nulls_opt": 111, "limit-clause": 112, "LIMIT": 113, "OFFSET": 114, "DOT": 115, "field-selector": 116, "STAR": 117, "DOTSTAR": 118, "LANGSWITCH": 119, "query-quantifier": 120, "ANY": 121, "quantified-query": 122, "STRING": 123, "array-constructor": 124, "boolean-literal": 125, "TRUE": 126, "FALSE": 127, "NULL": 128, "ARRAY": 129, "LBRA": 130, "expression-list_opt": 131, "row-constructor": 132, "ROW": 133, "primary-expression": 134, "PARAM": 135, "NUMBER": 136, "case-expression": 137, "function-call": 138, "filter-clause": 139, "filter-clause_opt": 140, "WITHIN": 141, "OVER": 142, "window-spec-or-id": 143, "FILTER": 144, "ID_opt": 145, "PARTITION": 146, "frame-clause_opt": 147, "frame-clause": 148, "frame-mode": 149, "frame-boundary-start": 150, "frame-exclusion_opt": 151, "BETWEEN": 152, "AND": 153, "frame-boundary-end": 154, "RANGE": 155, "GROUPS": 156, "UNBOUNDED": 157, "PRECEDING": 158, "CURRENT": 159, "FOLLOWING": 160, "frame-exclusion": 161, "EXCLUDE": 162, "TIES": 163, "NOOTHERS": 164, "cast-expression": 165, "CAST": 166, "braces_opt": 167, "DBLCOLON": 168, "subscript-expression": 169, "COLON": 170, "unary-expression": 171, "unary-operator": 172, "PLUS": 173, "MINUS": 174, "exponentiative-expression": 175, "EXP": 176, "multiplicative-operator": 177, "DIV": 178, "MOD": 179, "multiplicative-expression": 180, "additive-expression": 181, "additive-or-quantified-expression": 182, "userop-expression": 183, "USEROP": 184, "OPERATOR": 185, "userop-or-quantified-expression": 186, "string-set-range-expression": 187, "not_opt": 188, "IN": 189, "LIKE": 190, "ILIKE": 191, "relational-operator": 192, "LT": 193, "GT": 194, "LTE": 195, "GTE": 196, "EQ": 197, "NEQ": 198, "relational-expression": 199, "relational-or-quantified-expression": 200, "is-expression": 201, "IS": 202, "EXISTS": 203, "logical-NOT-expression": 204, "NOT": 205, "logical-AND-expression": 206, "logical-OR-expression": 207, "OR": 208, "CASE": 209, "when-list": 210, "else-expression_opt": 211, "END": 212, "WHEN": 213, "THEN": 214, "OUTER": 215, "setop_opt": 216, "CLOSEDBRAS": 217, "LATERAL": 218, "expression_opt": 219, "ELSE": 220, "RECURSIVE": 221, "MATERIALIZED": 222, "$accept": 0, "$end": 1 };
    this.terminals_ = { 2: "error", 4: "RBRA", 5: "RPAR", 6: "RCUR", 7: "LANGEXIT", 12: "SEMICOLON", 20: "SELECT", 23: "FROM", 30: "LPAR", 34: "ALL", 35: "DISTINCT", 38: "COMMA", 44: "WITH", 45: "ORDINALITY", 46: "ROWS", 52: "ID", 53: "AS", 57: "SEARCH", 59: "FIRST", 60: "BY", 61: "SET", 63: "CYCLE", 64: "USING", 65: "TO", 66: "DEFAULT", 67: "DEPTH", 68: "BREADTH", 69: "VALUES", 74: "CROSS", 75: "JOIN", 76: "NATURAL", 77: "INNER", 78: "LEFT", 80: "RIGHT", 81: "FULL", 83: "ON", 85: "WHERE", 87: "GROUP", 89: "ROLLUP", 90: "CUBE", 91: "GROUPINGSETS", 93: "WINDOW", 97: "HAVING", 99: "UNION", 100: "INTERSECT", 101: "EXCEPT", 103: "ASC", 104: "DESC", 106: "NULLS", 107: "LAST", 109: "ORDERBY", 113: "LIMIT", 114: "OFFSET", 115: "DOT", 117: "STAR", 118: "DOTSTAR", 119: "LANGSWITCH", 121: "ANY", 123: "STRING", 126: "TRUE", 127: "FALSE", 128: "NULL", 129: "ARRAY", 130: "LBRA", 133: "ROW", 135: "PARAM", 136: "NUMBER", 141: "WITHIN", 142: "OVER", 144: "FILTER", 146: "PARTITION", 152: "BETWEEN", 153: "AND", 155: "RANGE", 156: "GROUPS", 157: "UNBOUNDED", 158: "PRECEDING", 159: "CURRENT", 160: "FOLLOWING", 162: "EXCLUDE", 163: "TIES", 164: "NOOTHERS", 166: "CAST", 168: "DBLCOLON", 170: "COLON", 173: "PLUS", 174: "MINUS", 176: "EXP", 178: "DIV", 179: "MOD", 184: "USEROP", 185: "OPERATOR", 189: "IN", 190: "LIKE", 191: "ILIKE", 193: "LT", 194: "GT", 195: "LTE", 196: "GTE", 197: "EQ", 198: "NEQ", 202: "IS", 203: "EXISTS", 205: "NOT", 208: "OR", 209: "CASE", 212: "END", 213: "WHEN", 214: "THEN", 215: "OUTER", 217: "CLOSEDBRAS", 218: "LATERAL", 220: "ELSE", 221: "RECURSIVE", 222: "MATERIALIZED" };
    this.productions_ = [0, [3, 1], [3, 1], [3, 1], [3, 1], [8, 1], [8, 2], [8, 3], [8, 4], [8, 2], [9, 1], [9, 3], [11, 1], [13, 3], [13, 4], [13, 3], [19, 3], [19, 9], [29, 1], [29, 3], [18, 1], [18, 5], [18, 6], [18, 3], [18, 4], [33, 1], [33, 1], [22, 2], [22, 4], [39, 2], [39, 4], [39, 2], [43, 2], [43, 4], [43, 7], [17, 3], [51, 6], [51, 9], [56, 1], [56, 8], [62, 1], [62, 7], [62, 11], [50, 1], [50, 3], [58, 1], [58, 1], [14, 2], [24, 1], [24, 5], [24, 5], [24, 5], [71, 1], [71, 1], [71, 2], [71, 3], [71, 3], [71, 3], [82, 2], [82, 5], [55, 1], [55, 3], [84, 2], [86, 3], [86, 6], [86, 6], [86, 6], [92, 2], [94, 3], [94, 5], [96, 2], [98, 1], [98, 1], [98, 5], [32, 1], [32, 1], [32, 1], [102, 1], [102, 1], [105, 2], [105, 2], [108, 4], [108, 5], [112, 2], [112, 4], [112, 2], [112, 4], [40, 1], [40, 3], [116, 1], [116, 1], [116, 5], [116, 2], [31, 1], [31, 1], [120, 1], [120, 1], [122, 4], [122, 4], [122, 4], [125, 1], [125, 1], [125, 1], [124, 4], [124, 4], [132, 4], [132, 3], [132, 5], [132, 6], [134, 1], [134, 1], [134, 1], [134, 1], [134, 2], [134, 1], [134, 3], [134, 3], [134, 1], [134, 1], [134, 1], [134, 1], [138, 1], [138, 5], [138, 6], [138, 7], [138, 11], [138, 10], [138, 6], [138, 7], [42, 3], [42, 4], [42, 4], [47, 1], [47, 3], [139, 5], [143, 1], [143, 1], [95, 8], [95, 7], [148, 3], [148, 6], [149, 1], [149, 1], [149, 1], [150, 2], [150, 2], [150, 2], [154, 2], [154, 2], [154, 2], [161, 2], [161, 2], [161, 2], [161, 3], [88, 1], [88, 3], [70, 3], [70, 5], [165, 1], [165, 7], [165, 4], [169, 1], [169, 4], [169, 6], [171, 1], [171, 2], [172, 1], [172, 1], [175, 1], [175, 3], [177, 1], [177, 1], [177, 1], [180, 1], [180, 3], [181, 1], [181, 3], [181, 3], [182, 1], [182, 1], [183, 1], [183, 3], [183, 6], [186, 1], [186, 1], [187, 1], [187, 6], [187, 6], [187, 6], [187, 4], [187, 4], [192, 1], [192, 1], [192, 1], [192, 1], [192, 1], [192, 1], [199, 1], [199, 3], [200, 1], [200, 1], [201, 1], [201, 4], [201, 6], [201, 4], [204, 1], [204, 2], [206, 1], [206, 3], [207, 1], [207, 3], [36, 1], [137, 5], [210, 4], [210, 5], [10, 0], [10, 1], [131, 0], [131, 1], [188, 0], [188, 1], [37, 0], [37, 2], [41, 0], [41, 2], [41, 5], [79, 0], [79, 1], [73, 0], [73, 1], [25, 0], [25, 1], [26, 0], [26, 1], [27, 0], [27, 1], [216, 0], [216, 1], [15, 0], [15, 1], [16, 0], [16, 1], [167, 0], [167, 1], [110, 0], [110, 1], [111, 0], [111, 1], [21, 0], [21, 1], [72, 0], [72, 1], [219, 0], [219, 1], [211, 0], [211, 2], [140, 0], [140, 1], [28, 0], [28, 1], [145, 0], [145, 1], [147, 0], [147, 1], [151, 0], [151, 1], [48, 0], [48, 2], [49, 0], [49, 1], [54, 0], [54, 2], [54, 1]];
    const $V0 = [1, 4], $V1 = [1, 5], $V2 = [1, 6], $V3 = [1, 7], $V4 = [1, 17], $V5 = [1, 16], $V6 = [1, 14], $V7 = [1, 13], $V8 = [1, 4, 5, 6, 7], $V9 = [1, 2], $Va = [1, 4, 5, 6, 7, 12], $Vb = [1, 4, 5, 6, 7, 12, 113, 114], $Vc = [2, 238], $Vd = [1, 23], $Ve = [1, 31], $Vf = [1, 32], $Vg = [1, 28], $Vh = [1, 29], $Vi = [1, 30], $Vj = [1, 34], $Vk = [1, 4, 5, 6, 7, 12, 34, 35, 99, 100, 101, 109, 113, 114], $Vl = [1, 39], $Vm = [30, 52, 117, 123, 126, 127, 128, 129, 133, 135, 136, 166, 173, 174, 203, 205, 209], $Vn = [2, 240], $Vo = [1, 48], $Vp = [1, 49], $Vq = [1, 50], $Vr = [1, 78], $Vs = [1, 76], $Vt = [1, 83], $Vu = [1, 75], $Vv = [1, 85], $Vw = [1, 86], $Vx = [1, 87], $Vy = [1, 88], $Vz = [1, 89], $VA = [1, 73], $VB = [1, 74], $VC = [1, 71], $VD = [1, 68], $VE = [1, 69], $VF = [1, 58], $VG = [1, 56], $VH = [1, 90], $VI = [1, 96], $VJ = [20, 30], $VK = [30, 52, 99, 100, 101, 117, 123, 126, 127, 128, 129, 133, 135, 136, 166, 173, 174, 203, 205, 209], $VL = [1, 98], $VM = [2, 217], $VN = [1, 106], $VO = [1, 4, 5, 6, 7, 12, 38, 46, 106, 113, 114, 155, 156], $VP = [2, 244], $VQ = [1, 118], $VR = [1, 119], $VS = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 155, 156, 158, 160, 170, 208, 212, 213, 214, 220], $VT = [1, 121], $VU = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 153, 155, 156, 158, 160, 170, 208, 212, 213, 214, 220], $VV = [1, 125], $VW = [1, 126], $VX = [1, 127], $VY = [1, 128], $VZ = [1, 129], $V_ = [1, 130], $V$ = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 153, 155, 156, 158, 160, 170, 193, 194, 195, 196, 197, 198, 202, 208, 212, 213, 214, 220], $V01 = [2, 219], $V11 = [1, 133], $V21 = [1, 134], $V31 = [1, 135], $V41 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 152, 153, 155, 156, 158, 160, 170, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $V51 = [1, 136], $V61 = [1, 137], $V71 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 152, 153, 155, 156, 158, 160, 170, 173, 174, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $V81 = [1, 139], $V91 = [1, 140], $Va1 = [1, 141], $Vb1 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 152, 153, 155, 156, 158, 160, 170, 173, 174, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $Vc1 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 152, 153, 155, 156, 158, 160, 170, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $Vd1 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 130, 152, 153, 155, 156, 158, 160, 170, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $Ve1 = [30, 52, 117, 123, 126, 127, 128, 129, 133, 135, 136, 166, 209], $Vf1 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 130, 152, 153, 155, 156, 158, 160, 168, 170, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $Vg1 = [1, 4, 5, 6, 7, 12, 23, 30, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 118, 130, 152, 153, 155, 156, 158, 160, 168, 170, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $Vh1 = [2, 87], $Vi1 = [1, 151], $Vj1 = [1, 163], $Vk1 = [1, 4, 5, 6, 7, 12, 34, 35, 38, 46, 93, 97, 99, 100, 101, 109, 113, 114, 155, 156], $Vl1 = [20, 30, 38], $Vm1 = [20, 30, 38, 63], $Vn1 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 99, 100, 101, 109, 113, 114], $Vo1 = [2, 221], $Vp1 = [1, 174], $Vq1 = [1, 4, 5, 6, 7, 12, 38, 46, 113, 114, 155, 156], $Vr1 = [2, 246], $Vs1 = [1, 181], $Vt1 = [1, 189], $Vu1 = [1, 190], $Vv1 = [30, 34, 52, 117, 121, 123, 126, 127, 128, 129, 133, 135, 136, 166, 173, 174, 209], $Vw1 = [1, 4, 5, 6, 7, 12, 38, 109, 113, 114], $Vx1 = [1, 225], $Vy1 = [2, 270], $Vz1 = [1, 230], $VA1 = [1, 231], $VB1 = [1, 238], $VC1 = [1, 240], $VD1 = [2, 242], $VE1 = [1, 263], $VF1 = [2, 88], $VG1 = [2, 116], $VH1 = [2, 129], $VI1 = [2, 256], $VJ1 = [1, 274], $VK1 = [1, 286], $VL1 = [5, 38, 61], $VM1 = [1, 4, 5, 6, 7, 12, 34, 35, 87, 93, 97, 99, 100, 101, 109, 113, 114], $VN1 = [1, 297], $VO1 = [1, 298], $VP1 = [1, 299], $VQ1 = [1, 300], $VR1 = [1, 301], $VS1 = [1, 302], $VT1 = [1, 4, 5, 6, 7, 12, 34, 35, 38, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 109, 113, 114], $VU1 = [1, 4, 5, 6, 7, 12, 34, 35, 38, 64, 74, 75, 76, 77, 78, 80, 81, 83, 85, 87, 93, 97, 99, 100, 101, 109, 113, 114], $VV1 = [2, 223], $VW1 = [1, 306], $VX1 = [1, 4, 5, 6, 7, 12, 30, 34, 35, 38, 53, 64, 74, 75, 76, 77, 78, 80, 81, 83, 85, 87, 93, 97, 99, 100, 101, 109, 113, 114], $VY1 = [2, 131], $VZ1 = [1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 130, 142, 152, 153, 155, 156, 158, 160, 168, 170, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], $V_1 = [2, 257], $V$1 = [1, 4, 5, 6, 7, 12, 34, 35, 93, 97, 99, 100, 101, 109, 113, 114], $V02 = [30, 52], $V12 = [2, 250], $V22 = [1, 346], $V32 = [30, 52, 218], $V42 = [2, 226], $V52 = [1, 351], $V62 = [1, 378], $V72 = [1, 376], $V82 = [1, 4, 5, 6, 7, 12, 34, 35, 93, 99, 100, 101, 109, 113, 114], $V92 = [1, 4, 5, 6, 7, 12, 34, 35, 38, 53, 64, 74, 75, 76, 77, 78, 80, 81, 83, 85, 87, 93, 97, 99, 100, 101, 109, 113, 114], $Va2 = [212, 213, 220], $Vb2 = [20, 30, 38, 57, 63], $Vc2 = [2, 262], $Vd2 = [1, 471], $Ve2 = [1, 470], $Vf2 = [1, 472], $Vg2 = [1, 4, 5, 6, 7, 12, 34, 35, 38, 99, 100, 101, 109, 113, 114], $Vh2 = [1, 480], $Vi2 = [1, 482], $Vj2 = [30, 52, 117, 123, 126, 127, 128, 129, 133, 135, 136, 152, 157, 159, 166, 173, 174, 203, 205, 209], $Vk2 = [2, 264], $Vl2 = [1, 487], $Vm2 = [5, 153, 162], $Vn2 = [5, 162];
    const o2 = JisonParser.expandParseTable;
    this.table = [{ 3: 2, 4: $V0, 5: $V1, 6: $V2, 7: $V3, 8: 1, 9: 3, 11: 8, 13: 9, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 44: $V6, 69: $V7 }, { 1: [3] }, { 1: [2, 5], 2: [1, 18] }, o2($V8, [2, 215], { 10: 19, 12: [1, 20] }), o2($V9, [2, 1]), o2($V9, [2, 2]), o2($V9, [2, 3]), o2($V9, [2, 4]), o2($Va, [2, 10]), o2($Va, [2, 12]), o2($Vb, $Vc, { 15: 21, 108: 22, 109: $Vd }), { 18: 24, 19: 15, 20: $V4, 30: $V5 }, o2($Vb, $Vc, { 108: 22, 15: 25, 32: 26, 33: 27, 34: $Ve, 35: $Vf, 99: $Vg, 100: $Vh, 101: $Vi, 109: $Vd }), { 30: $Vj, 70: 33 }, { 49: 35, 52: [2, 268], 221: [1, 36] }, o2($Vk, [2, 20]), { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 31: 37, 44: $V6, 69: $V7, 119: $Vl }, o2($Vm, [2, 248], { 21: 40, 98: 41, 34: [1, 43], 35: [1, 42] }), { 1: [2, 6] }, { 1: [2, 9], 3: 44, 4: $V0, 5: $V1, 6: $V2, 7: $V3 }, o2($V8, [2, 216], { 13: 9, 14: 10, 17: 11, 18: 12, 19: 15, 11: 45, 20: $V4, 30: $V5, 44: $V6, 69: $V7 }), o2($Va, $Vn, { 16: 46, 112: 47, 113: $Vo, 114: $Vp }), o2($Vb, [2, 239], { 38: $Vq }), { 30: $Vr, 36: 51, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vb, $Vc, { 108: 22, 32: 26, 33: 27, 15: 92, 34: $Ve, 35: $Vf, 99: $Vg, 100: $Vh, 101: $Vi, 109: $Vd }), o2($Va, $Vn, { 112: 47, 16: 93, 113: $Vo, 114: $Vp }), { 19: 95, 20: $V4, 29: 94, 30: $VI }, { 32: 97, 99: $Vg, 100: $Vh, 101: $Vi }, o2($VJ, [2, 74]), o2($VJ, [2, 75]), o2($VJ, [2, 76]), o2($VK, [2, 25]), o2($VK, [2, 26]), o2([1, 4, 5, 6, 7, 12, 109, 113, 114], [2, 47], { 38: $VL }), { 5: $VM, 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 100, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 131: 99, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 50: 102, 51: 105, 52: $VN, 56: 104, 62: 103 }, { 52: [2, 269] }, { 5: [1, 107] }, { 5: [2, 93] }, { 5: [2, 94] }, { 22: 108, 30: $Vr, 36: 109, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vm, [2, 249]), o2($Vm, [2, 71], { 83: [1, 110] }), o2($Vm, [2, 72]), { 1: [2, 7], 2: [1, 111] }, o2($Va, [2, 11]), o2($Va, [2, 13]), o2($Va, [2, 241]), { 30: $Vr, 34: [1, 113], 36: 112, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 114, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 115, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($VO, $VP, { 110: 116, 102: 117, 103: $VQ, 104: $VR }), o2([1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 155, 156, 158, 160, 170, 212, 213, 214, 220], [2, 211], { 208: [1, 120] }), o2($VS, [2, 209], { 153: $VT }), o2($VU, [2, 207]), o2($VU, [2, 205]), { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 122, 203: $VF, 209: $VH }, o2($VU, [2, 201], { 192: 124, 193: $VV, 194: $VW, 195: $VX, 196: $VY, 197: $VZ, 198: $V_, 202: [1, 123] }), { 30: [1, 131] }, o2($V$, [2, 197]), o2($V$, [2, 185], { 188: 132, 152: $V01, 189: $V01, 190: $V01, 191: $V01, 184: $V11, 185: $V21, 205: $V31 }), o2($V41, [2, 180], { 173: $V51, 174: $V61 }), o2($V71, [2, 175], { 177: 138, 117: $V81, 178: $V91, 179: $Va1 }), o2($Vb1, [2, 173], { 176: [1, 142] }), o2($Vc1, [2, 168]), o2($Vc1, [2, 164], { 130: [1, 143] }), { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 144, 166: $VC, 209: $VH }, o2($Vd1, [2, 161]), o2($Ve1, [2, 166]), o2($Ve1, [2, 167]), o2($Vd1, [2, 158], { 168: [1, 145] }), { 30: [1, 146] }, o2($Vf1, [2, 109]), o2($Vf1, [2, 110]), o2($Vf1, [2, 111]), o2($Vf1, [2, 112]), o2($Vg1, $Vh1, { 115: [1, 148], 123: [1, 147] }), o2($Vf1, [2, 114]), { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $Vi1, 31: 150, 36: 149, 40: 84, 42: 91, 44: $V6, 52: $Vs, 69: $V7, 116: 72, 117: $Vt, 119: $Vl, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 117]), o2($Vf1, [2, 118]), o2($Vf1, [2, 119]), o2($Vf1, [2, 120]), o2($Vf1, [2, 89]), o2($Vf1, [2, 90], { 30: [1, 153], 118: [1, 152] }), o2($Vf1, [2, 100]), o2($Vf1, [2, 101]), o2($Vf1, [2, 102]), { 30: [1, 155], 130: [1, 154] }, { 30: [1, 156] }, { 30: $Vr, 36: 157, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 121]), o2($Va, $Vn, { 112: 47, 16: 158, 113: $Vo, 114: $Vp }), o2($Va, [2, 15]), o2($Vk, [2, 23]), o2($Vk, [2, 18]), { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 31: 159, 44: $V6, 69: $V7, 119: $Vl }, { 19: 95, 20: $V4, 29: 160, 30: $VI }, { 30: [1, 161] }, { 5: [1, 162] }, o2([4, 5], [2, 218], { 38: $Vj1 }), o2($Vk1, [2, 154]), o2($VJ, [2, 35], { 38: [1, 164] }), o2($Vl1, [2, 43]), o2($Vl1, [2, 40], { 63: [1, 165] }), o2($Vm1, [2, 38], { 57: [1, 166] }), { 30: [1, 168], 53: [1, 167] }, { 32: 169, 33: 170, 34: $Ve, 35: $Vf, 99: $Vg, 100: $Vh, 101: $Vi }, o2($Vk, [2, 16], { 23: [1, 171], 38: [1, 172] }), o2($Vn1, $Vo1, { 37: 173, 53: $Vp1 }), { 30: [1, 175] }, { 1: [2, 8] }, o2($Va, [2, 83], { 114: [1, 176] }), { 114: [1, 177] }, o2($Va, [2, 85]), o2($VO, $VP, { 102: 117, 110: 178, 103: $VQ, 104: $VR }), o2($Vq1, $Vr1, { 111: 179, 105: 180, 106: $Vs1 }), o2($VO, [2, 245]), o2($VO, [2, 77]), o2($VO, [2, 78]), { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 182, 209: $VH }, { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 183, 205: $VG, 209: $VH }, o2($VU, [2, 206]), o2([35, 126, 127, 128], $V01, { 188: 184, 205: $V31 }), { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 187, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 186, 182: 185, 209: $VH }, o2($Vv1, [2, 191]), o2($Vv1, [2, 192]), o2($Vv1, [2, 193]), o2($Vv1, [2, 194]), o2($Vv1, [2, 195]), o2($Vv1, [2, 196]), { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 31: 191, 44: $V6, 69: $V7, 119: $Vl }, { 152: [1, 192], 189: [1, 193], 190: [1, 194], 191: [1, 195] }, { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 187, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 186, 182: 196, 209: $VH }, { 30: [1, 197] }, o2([35, 126, 127, 128, 152, 189, 190, 191], [2, 220]), { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 198, 209: $VH }, { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 199, 209: $VH }, { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 200, 166: $VC, 209: $VH }, o2($Ve1, [2, 170]), o2($Ve1, [2, 171]), o2($Ve1, [2, 172]), { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 201, 166: $VC, 209: $VH }, { 30: $Vr, 36: 202, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vc1, [2, 165]), { 52: [1, 203] }, { 30: $Vr, 36: 204, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 113]), { 52: [1, 205] }, { 5: [1, 206], 38: [1, 207] }, { 5: [1, 208] }, { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $Vi1, 31: 209, 36: 149, 40: 84, 42: 91, 44: $V6, 52: $Vs, 69: $V7, 116: 72, 117: $Vt, 119: $Vl, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 92]), { 5: [1, 212], 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $Vi1, 31: 213, 33: 211, 34: $Ve, 35: $Vf, 36: 101, 40: 84, 42: 91, 44: $V6, 52: $Vs, 69: $V7, 88: 210, 116: 72, 117: $Vt, 119: $Vl, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 4: $VM, 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 100, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 131: 214, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 31: 215, 44: $V6, 69: $V7, 119: $Vl }, { 5: [1, 217], 30: $Vr, 36: 216, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 210: 218, 213: [1, 219] }, o2($Va, [2, 14]), { 5: [1, 220] }, o2($Vk, [2, 24]), { 5: $VM, 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 100, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 131: 221, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vw1, [2, 156]), { 30: $Vr, 36: 222, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 51: 105, 52: $VN, 56: 104, 62: 223 }, { 52: $Vx1, 55: 224 }, { 58: 226, 67: [1, 227], 68: [1, 228] }, { 30: $Vy1, 54: 229, 205: $Vz1, 222: $VA1 }, { 52: $Vx1, 55: 232 }, { 19: 95, 20: $V4, 29: 233, 30: $VI }, { 32: 234, 99: $Vg, 100: $Vh, 101: $Vi }, { 24: 235, 30: $VB1, 39: 236, 40: 237, 42: 239, 52: $VC1 }, { 30: $Vr, 36: 241, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vn1, [2, 27]), { 52: [1, 242] }, { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 243, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 244, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 245, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vq1, $Vr1, { 105: 180, 111: 246, 106: $Vs1 }), o2($Vq1, [2, 81]), o2($Vq1, [2, 247]), { 59: [1, 247], 107: [1, 248] }, o2($VS, [2, 210], { 153: $VT }), o2($VU, [2, 208]), { 35: [1, 250], 125: 249, 126: $Vv, 127: $Vw, 128: $Vx }, o2($V$, [2, 198]), o2($V41, [2, 178], { 173: $V51, 174: $V61 }), o2($V41, [2, 179]), { 30: [1, 251] }, { 30: [2, 95] }, { 30: [2, 96] }, { 5: [1, 252] }, { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 255, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 254, 186: 253, 209: $VH }, { 30: [1, 256] }, { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 255, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 254, 186: 257, 209: $VH }, { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 255, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 254, 186: 258, 209: $VH }, o2($V41, [2, 181]), { 40: 259, 52: $VC1 }, o2($V71, [2, 176], { 177: 138, 117: $V81, 178: $V91, 179: $Va1 }), o2($V71, [2, 177], { 177: 138, 117: $V81, 178: $V91, 179: $Va1 }), o2($Vb1, [2, 174]), o2($Vc1, [2, 169]), { 4: [1, 260], 170: [1, 261] }, o2($Vd1, $VD1, { 167: 262, 217: $VE1 }), { 53: [1, 264] }, o2($Vg1, $VF1, { 115: [1, 265] }), o2($Vf1, [2, 115]), { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 266, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, $VG1), { 5: [1, 267] }, { 5: [1, 268], 38: $Vj1, 108: 269, 109: $Vd }, { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 270, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, $VH1, { 140: 272, 139: 273, 141: [1, 271], 142: $VI1, 144: $VJ1 }), { 5: [1, 275] }, { 4: [1, 276] }, { 5: [1, 277] }, { 5: [1, 278], 38: [1, 279] }, o2($Vf1, [2, 106]), { 211: 280, 212: [2, 254], 213: [1, 281], 220: [1, 282] }, { 30: $Vr, 36: 283, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vk, [2, 19]), { 5: [1, 284] }, o2($Vk1, [2, 155]), o2($Vl1, [2, 44]), { 38: $VK1, 61: [1, 285] }, o2($VL1, [2, 60]), { 59: [1, 287] }, { 59: [2, 45] }, { 59: [2, 46] }, { 30: [1, 288] }, { 222: [1, 289] }, { 30: [2, 272] }, { 5: [1, 290], 38: $VK1 }, o2($Vk, [2, 21]), { 19: 95, 20: $V4, 29: 291, 30: $VI }, o2($VM1, [2, 230], { 25: 292, 71: 293, 84: 296, 38: $VN1, 74: [1, 294], 75: $VO1, 76: [1, 295], 77: $VP1, 78: $VQ1, 80: $VR1, 81: $VS1, 85: [1, 303] }), o2($VT1, [2, 48]), o2($VU1, $VV1, { 41: 304, 30: [1, 305], 53: $VW1 }), { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 31: 307, 44: $V6, 69: $V7, 119: $Vl }, o2($VU1, $VV1, { 41: 308, 53: $VW1 }), o2($VX1, $Vh1, { 115: [1, 309] }), o2($Vn1, $Vo1, { 37: 310, 53: $Vp1 }), o2($Vn1, [2, 222]), { 5: [1, 311], 38: $Vj1 }, o2($Va, [2, 86]), o2($Va, [2, 84]), o2($Vq1, [2, 82]), o2($Vq1, [2, 79]), o2($Vq1, [2, 80]), o2($VU, [2, 202]), { 23: [1, 312] }, { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 31: 313, 44: $V6, 69: $V7, 119: $Vl, 123: [1, 314], 124: 315, 129: $Vy }, o2($VU, [2, 204]), { 153: [1, 316] }, o2($V$, [2, 183], { 184: $V11, 185: $V21 }), o2($V$, [2, 184]), { 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $Vi1, 31: 318, 36: 101, 40: 84, 42: 91, 44: $V6, 52: $Vs, 69: $V7, 88: 317, 116: 72, 117: $Vt, 119: $Vl, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($V$, [2, 189]), o2($V$, [2, 190]), { 5: [1, 319] }, o2($Vd1, [2, 162]), { 30: $Vr, 36: 320, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vd1, [2, 160]), o2($Vd1, [2, 243]), { 52: [1, 321] }, { 52: [1, 322] }, { 5: [1, 323], 38: $Vj1 }, o2([5, 38, 109, 117, 130, 152, 153, 168, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208], $VG1, { 32: 169, 33: 170, 34: $Ve, 35: $Vf, 99: $Vg, 100: $Vh, 101: $Vi }), o2($Vf1, $VY1, { 139: 324, 140: 326, 141: [1, 325], 142: $VI1, 144: $VJ1 }), { 5: [1, 327], 38: $Vq }, { 5: $Vc, 15: 328, 38: $Vj1, 108: 22, 109: $Vd }, { 87: [1, 329] }, { 142: [1, 330] }, o2($VZ1, $V_1), { 30: [1, 331] }, o2([1, 4, 5, 6, 7, 12, 23, 34, 35, 38, 46, 53, 64, 66, 74, 75, 76, 77, 78, 80, 81, 83, 85, 87, 93, 97, 99, 100, 101, 103, 104, 106, 109, 113, 114, 117, 130, 152, 153, 155, 156, 158, 160, 168, 170, 173, 174, 176, 178, 179, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 205, 208, 212, 213, 214, 220], [2, 130]), o2($Vf1, [2, 103]), o2($Vf1, [2, 104]), o2($Vf1, [2, 105]), { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 332, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 212: [1, 333] }, { 30: $Vr, 36: 334, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 335, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 214: [1, 336] }, o2($Vw1, [2, 157]), { 52: [1, 337] }, { 52: [1, 338] }, { 60: [1, 339] }, { 11: 340, 13: 9, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 44: $V6, 69: $V7 }, { 30: [2, 271] }, { 53: [1, 341] }, o2($Vk, [2, 22]), o2($V$1, [2, 232], { 26: 342, 86: 343, 87: [1, 344] }), o2($V02, $V12, { 72: 345, 218: $V22 }), { 75: [1, 347] }, { 38: $VN1, 71: 348, 75: $VO1, 77: $VP1, 78: $VQ1, 80: $VR1, 81: $VS1 }, o2($VM1, [2, 231]), o2($V32, [2, 52]), o2($V32, [2, 53]), { 75: [1, 349] }, { 75: $V42, 79: 350, 215: $V52 }, { 75: $V42, 79: 352, 215: $V52 }, { 75: $V42, 79: 353, 215: $V52 }, { 30: $Vr, 36: 354, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($VU1, [2, 29]), { 5: [1, 355], 13: 38, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $Vi1, 31: 213, 36: 101, 40: 84, 42: 91, 44: $V6, 52: $Vs, 69: $V7, 88: 356, 116: 72, 117: $Vt, 119: $Vl, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 52: [1, 357] }, { 5: [1, 358] }, o2($VU1, [2, 31]), { 52: [1, 359] }, o2($Vn1, [2, 28]), o2($Vm, [2, 73]), { 30: $Vr, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 360, 209: $VH }, { 5: [1, 361] }, { 5: [1, 362] }, { 5: [1, 363] }, { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 255, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 254, 186: 364, 209: $VH }, { 5: [1, 365], 38: $Vj1 }, { 5: [1, 366] }, { 30: $Vr, 34: $Vt1, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 120: 188, 121: $Vu1, 122: 187, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 186, 182: 367, 209: $VH }, { 4: [1, 368] }, { 5: $VD1, 167: 369, 217: $VE1 }, o2($Vf1, [2, 91]), o2($Vf1, [2, 107]), o2($Vf1, [2, 122], { 142: $V_1 }), { 87: [1, 370] }, { 142: [1, 371] }, o2($Vf1, $VI1, { 139: 273, 140: 372, 144: $VJ1 }), { 5: [1, 373] }, { 30: [1, 374] }, { 30: $V62, 52: $V72, 95: 377, 143: 375 }, { 85: [1, 379] }, { 5: [1, 380], 38: $Vj1 }, o2($Vf1, [2, 212]), { 214: [1, 381] }, { 212: [2, 255] }, { 30: $Vr, 36: 382, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 64: [1, 383], 65: [1, 384] }, o2($VL1, [2, 61]), { 52: $Vx1, 55: 385 }, { 5: [1, 386] }, { 30: $Vy1, 54: 387, 205: $Vz1, 222: $VA1 }, o2($V82, [2, 234], { 27: 388, 96: 389, 97: [1, 390] }), o2($V$1, [2, 233]), { 60: [1, 391] }, { 30: $VB1, 39: 392, 40: 237, 42: 239, 52: $VC1 }, o2($V02, [2, 251]), o2($V02, $V12, { 72: 393, 218: $V22 }), o2($V02, $V12, { 72: 394, 218: $V22 }), o2($V32, [2, 54]), { 75: [1, 395] }, { 75: [2, 227] }, { 75: [1, 396] }, { 75: [1, 397] }, o2($VM1, [2, 62]), o2($V92, $VH1), { 5: [1, 398], 38: $Vj1 }, o2($VU1, [2, 224], { 30: [1, 399] }), o2($VU1, $VV1, { 41: 400, 53: $VW1 }), o2($VX1, $VF1), o2($VU, [2, 203], { 192: 124, 193: $VV, 194: $VW, 195: $VX, 196: $VY, 197: $VZ, 198: $V_ }), o2($V41, [2, 97]), o2($V41, [2, 98]), o2($V41, [2, 99]), o2($V$, [2, 186]), o2($V$, [2, 187]), o2($V$, [2, 188]), o2($V41, [2, 182]), o2($Vd1, [2, 163]), { 5: [1, 401] }, { 30: [1, 402] }, { 30: $V62, 52: $V72, 95: 377, 143: 403 }, o2($Vf1, [2, 123]), o2($Vf1, $VI1, { 139: 273, 140: 404, 144: $VJ1 }), { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 405, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 127]), o2($Vf1, [2, 135]), o2($Vf1, [2, 136]), { 52: [1, 407], 145: 406, 146: [2, 260] }, { 30: $Vr, 36: 408, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 108]), { 30: $Vr, 36: 409, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Va2, [2, 213]), { 52: [1, 410] }, { 30: $Vr, 36: 411, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 38: $VK1, 61: [1, 412] }, o2($Vb2, [2, 36]), { 30: [1, 413] }, o2($Vk, [2, 258], { 28: 414, 92: 415, 93: [1, 416] }), o2($V82, [2, 235]), { 30: $Vr, 36: 417, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 418, 89: [1, 419], 90: [1, 420], 91: [1, 421], 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($VT1, [2, 228], { 73: 422, 82: 423, 64: [1, 425], 83: [1, 424] }), { 30: $VB1, 39: 426, 40: 237, 42: 239, 52: $VC1 }, { 30: $VB1, 39: 427, 40: 237, 42: 239, 52: $VC1 }, o2($V32, [2, 55]), o2($V32, [2, 56]), o2($V32, [2, 57]), o2($V92, $VY1), { 52: $Vx1, 55: 428 }, o2($VU1, [2, 30]), o2($Vd1, [2, 159]), { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 429, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vf1, [2, 128]), o2($Vf1, [2, 124]), { 5: $Vc, 15: 430, 38: $Vj1, 108: 22, 109: $Vd }, { 146: [1, 431] }, { 146: [2, 261] }, { 5: [1, 432] }, o2($Va2, [2, 214]), o2($Vl1, [2, 41]), { 66: [1, 433] }, { 52: [1, 434] }, { 11: 435, 13: 9, 14: 10, 17: 11, 18: 12, 19: 15, 20: $V4, 30: $V5, 44: $V6, 69: $V7 }, o2($Vk, [2, 17]), o2($Vk, [2, 259]), { 52: [1, 437], 94: 436 }, o2($V82, [2, 70]), o2($V$1, [2, 63], { 38: $Vj1 }), { 30: [1, 438] }, { 30: [1, 439] }, { 30: [1, 440] }, o2($VT1, [2, 49]), o2($VT1, [2, 229]), { 30: $Vr, 36: 441, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: [1, 442] }, o2($VT1, [2, 50]), o2($VT1, [2, 51]), { 5: [1, 443], 38: $VK1 }, { 5: $Vc, 15: 444, 38: $Vj1, 108: 22, 109: $Vd }, { 5: [1, 445] }, { 60: [1, 446] }, o2($VZ1, [2, 134]), { 30: $Vr, 36: 447, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vm1, [2, 39]), { 5: [1, 448] }, o2($Vk, [2, 67], { 38: [1, 449] }), { 53: [1, 450] }, { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 451, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 452, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 30: $Vj, 70: 453 }, o2($VT1, [2, 58]), { 52: $Vx1, 55: 454 }, o2($VU1, [2, 225]), { 5: [1, 455] }, o2($Vf1, $VI1, { 139: 273, 140: 456, 144: $VJ1 }), { 30: $Vr, 36: 101, 40: 84, 42: 91, 52: $Vs, 88: 457, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 64: [1, 458] }, o2($Vb2, [2, 37]), { 52: [1, 459] }, { 30: $V62, 95: 460 }, { 5: [1, 461], 38: $Vj1 }, { 5: [1, 462], 38: $Vj1 }, { 5: [1, 463], 38: $VL }, { 5: [1, 464], 38: $VK1 }, o2($Vf1, $VI1, { 139: 273, 140: 465, 144: $VJ1 }), o2($Vf1, [2, 126]), { 5: $Vc2, 38: $Vj1, 46: $Vd2, 108: 466, 109: $Vd, 147: 467, 148: 468, 149: 469, 155: $Ve2, 156: $Vf2 }, { 52: [1, 473] }, { 53: [1, 474] }, o2($Vg2, [2, 68]), o2($V$1, [2, 64]), o2($V$1, [2, 65]), o2($V$1, [2, 66]), o2($VT1, $VV1, { 41: 475, 53: $VW1 }), o2($Vf1, [2, 125]), { 5: $Vc2, 38: $Vq, 46: $Vd2, 147: 476, 148: 468, 149: 469, 155: $Ve2, 156: $Vf2 }, { 5: [1, 477] }, { 5: [2, 263] }, { 30: $Vr, 36: 481, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 150: 478, 152: [1, 479], 157: $Vh2, 159: $Vi2, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, o2($Vj2, [2, 141]), o2($Vj2, [2, 142]), o2($Vj2, [2, 143]), o2($Vl1, [2, 42]), { 30: $V62, 95: 483 }, o2($VT1, [2, 59]), { 5: [1, 484] }, o2($Vf1, [2, 138]), { 5: $Vk2, 151: 485, 161: 486, 162: $Vl2 }, { 30: $Vr, 36: 481, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 150: 488, 157: $Vh2, 159: $Vi2, 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 158: [1, 489] }, { 158: [1, 490] }, { 133: [1, 491] }, o2($Vg2, [2, 69]), o2($Vf1, [2, 137]), { 5: [2, 139] }, { 5: [2, 265] }, { 87: [1, 492], 159: [1, 495], 163: [1, 493], 164: [1, 494] }, { 153: [1, 496] }, o2($Vm2, [2, 144]), o2($Vm2, [2, 145]), o2($Vm2, [2, 146]), { 5: [2, 150] }, { 5: [2, 151] }, { 5: [2, 152] }, { 133: [1, 497] }, { 30: $Vr, 36: 500, 40: 84, 42: 91, 52: $Vs, 116: 72, 117: $Vt, 123: $Vu, 124: 79, 125: 77, 126: $Vv, 127: $Vw, 128: $Vx, 129: $Vy, 132: 80, 133: $Vz, 134: 70, 135: $VA, 136: $VB, 137: 81, 138: 82, 154: 498, 157: [1, 501], 159: [1, 499], 165: 67, 166: $VC, 169: 65, 171: 64, 172: 66, 173: $VD, 174: $VE, 175: 63, 180: 62, 181: 61, 183: 60, 187: 59, 199: 57, 201: 55, 203: $VF, 204: 54, 205: $VG, 206: 53, 207: 52, 209: $VH }, { 5: [2, 153] }, { 5: $Vk2, 151: 502, 161: 486, 162: $Vl2 }, { 133: [1, 503] }, { 160: [1, 504] }, { 160: [1, 505] }, { 5: [2, 140] }, o2($Vn2, [2, 147]), o2($Vn2, [2, 148]), o2($Vn2, [2, 149])];
    this.defaultActions = { 18: [2, 6], 36: [2, 269], 38: [2, 93], 39: [2, 94], 111: [2, 8], 189: [2, 95], 190: [2, 96], 227: [2, 45], 228: [2, 46], 231: [2, 272], 289: [2, 271], 335: [2, 255], 351: [2, 227], 407: [2, 261], 468: [2, 263], 485: [2, 139], 486: [2, 265], 492: [2, 150], 493: [2, 151], 494: [2, 152], 497: [2, 153], 502: [2, 140] };
  }
  performAction(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
    const $0 = $$.length - 1;
    switch (yystate) {
      case 5:
      case 6:
        return [];
      case 7:
        return $$[$0 - 2];
      case 8:
        return $$[$0 - 3];
      case 9:
        return $$[$0 - 1];
      case 10:
      case 43:
      case 132:
      case 154:
        this.$ = [$$[$0]];
        break;
      case 11:
        this.$ = $$[$0 - 2];
        this.$.push($$[$0 - 1]);
        break;
      case 13:
      case 15:
        this.$ = new yy.ast.SelectStatement($$[$0 - 2], $$[$0 - 1], $$[$0]?.[0], $$[$0]?.[1]);
        break;
      case 14:
        this.$ = new yy.ast.SelectStatement($$[$0 - 2], $$[$0 - 1], $$[$0]?.[0], $$[$0]?.[1], $$[$0 - 3]);
        break;
      case 16:
        this.$ = new yy.ast.SelectSet($$[$0]);
        break;
      case 17:
        this.$ = new yy.ast.SelectSet($$[$0 - 6], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 7], $$[$0]);
        break;
      case 19:
        this.$ = yy.allFrom($$[$0 - 1]);
        break;
      case 21:
        this.$ = yy.allFrom($$[$0 - 3]);
        this.$.setOp = new yy.ast.SelectSetOp($$[$0], void 0, $$[$0 - 1]);
        break;
      case 22:
        this.$ = yy.allFrom($$[$0 - 4]);
        this.$.setOp = new yy.ast.SelectSetOp($$[$0], $$[$0 - 2], $$[$0 - 1]);
        break;
      case 23:
        this.$ = $$[$0 - 2];
        this.$.setOp = new yy.ast.SelectSetOp($$[$0], void 0, $$[$0 - 1]);
        break;
      case 24:
        this.$ = $$[$0 - 3];
        this.$.setOp = new yy.ast.SelectSetOp($$[$0], $$[$0 - 2], $$[$0 - 1]);
        break;
      case 27:
        this.$ = [$$[$0] ? new yy.ast.ASTAlias($$[$0 - 1], $$[$0]) : $$[$0 - 1]];
        break;
      case 28:
        this.$ = $$[$0 - 3];
        this.$.push($$[$0] ? new yy.ast.ASTAlias($$[$0 - 1], $$[$0]) : $$[$0 - 1]);
        break;
      case 29:
        if ($$[$0]) {
          $$[$0].table = $$[$0 - 1];
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0 - 1];
        }
        break;
      case 30:
        if ($$[$0]) {
          $$[$0].table = $$[$0 - 2];
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0 - 2];
        }
        break;
      case 32:
        this.$ = new yy.ast.TableFn($$[$0 - 1].id, $$[$0 - 1].args);
        if ($$[$0]) {
          $$[$0].table = this.$;
          this.$ = $$[$0];
        }
        break;
      case 33:
        this.$ = new yy.ast.TableFn($$[$0 - 3].id, $$[$0 - 3].args, true);
        if ($$[$0 - 1]) {
          $$[$0 - 1].table = this.$;
          this.$ = $$[$0 - 1];
        }
        break;
      case 34:
        this.$ = new yy.ast.RowsFrom($$[$0 - 3], $$[$0 - 1]);
        if ($$[$0]) {
          $$[$0].table = this.$;
          this.$ = $$[$0];
        }
        break;
      case 35:
        this.$ = $$[$0];
        for (const q of this.$) {
          q.recursive = $$[$0 - 1];
        }
        break;
      case 36:
        this.$ = new yy.ast.WithQuery($$[$0 - 5], [], $$[$0 - 1], $$[$0 - 3]);
        break;
      case 37:
        this.$ = new yy.ast.WithQuery($$[$0 - 8], $$[$0 - 6], $$[$0 - 1], $$[$0 - 3]);
        break;
      case 39:
        this.$ = $$[$0 - 7];
        this.$.searchType = $$[$0 - 5];
        this.$.searchCols = $$[$0 - 2];
        this.$.searchName = $$[$0];
        break;
      case 41:
        this.$ = $$[$0 - 6];
        this.$.cycleCols = $$[$0 - 4];
        this.$.cycleMarkName = $$[$0 - 2];
        this.$.cyclePathName = $$[$0];
        break;
      case 42:
        this.$ = $$[$0 - 10];
        this.$.cycleCols = $$[$0 - 8];
        this.$.cycleMarkName = $$[$0 - 6];
        this.$.cyclePathName = $$[$0];
        this.$.cycleMarkVal = $$[$0 - 4];
        this.$.cycleMarkDefault = $$[$0 - 2];
        break;
      case 44:
      case 133:
      case 155:
        this.$ = $$[$0 - 2];
        this.$.push($$[$0]);
        break;
      case 45:
        this.$ = "dfs";
        break;
      case 46:
        this.$ = "bfs";
        break;
      case 47:
        this.$ = new yy.ast.ValuesClause($$[$0]);
        break;
      case 49:
        this.$ = new yy.ast.JoinClause($$[$0 - 1], $$[$0 - 3], $$[$0], $$[$0 - 2]);
        break;
      case 50:
        this.$ = new yy.ast.JoinClause($$[$0], "cross", void 0, $$[$0 - 1]);
        break;
      case 51:
        this.$ = new yy.ast.JoinClause($$[$0], $$[$0 - 2], void 0, $$[$0 - 1]);
        this.$.natural = true;
        break;
      case 52:
        this.$ = "cross";
        break;
      case 53:
      case 54:
        this.$ = "inner";
        break;
      case 55:
        this.$ = "left";
        break;
      case 56:
        this.$ = "right";
        break;
      case 57:
        this.$ = "full";
        break;
      case 58:
      case 62:
      case 67:
      case 70:
      case 255:
        this.$ = $$[$0];
        break;
      case 59:
        this.$ = new yy.ast.ASTUsing($$[$0 - 2]);
        if ($$[$0 - 1]) {
          let alias = new yy.ast.ASTAlias($$[$0]);
          alias.table = this.$;
          this.$ = alias;
        }
        break;
      case 60:
        this.$ = [new yy.ast.ASTIdentifier($$[$0])];
        break;
      case 61:
        this.$ = $$[$0 - 2];
        this.$.push(new yy.ast.ASTIdentifier($$[$0]));
        break;
      case 63:
        this.$ = new yy.ast.GroupByClause($$[$0], "basic");
        break;
      case 64:
        this.$ = new yy.ast.GroupByClause($$[$0 - 1], "rollup");
        break;
      case 65:
        this.$ = new yy.ast.GroupByClause($$[$0 - 1], "cube");
        break;
      case 66:
        this.$ = new yy.ast.GroupByClause($$[$0 - 1], "groupingsets");
        break;
      case 68:
        this.$ = { [$$[$0 - 2]]: $$[$0] };
        break;
      case 69:
        this.$ = $$[$0 - 4];
        this.$[$$[$0 - 2]] = $$[$0];
        break;
      case 71:
      case 79:
      case 251:
      case 269:
      case 272:
        this.$ = true;
        break;
      case 72:
      case 80:
      case 250:
      case 268:
      case 271:
        this.$ = false;
        break;
      case 73:
      case 115:
      case 116:
      case 134:
      case 145:
      case 148:
        this.$ = $$[$0 - 1];
        break;
      case 81:
        this.$ = [new yy.ast.OrderByItem($$[$0 - 2], $$[$0 - 1], $$[$0])];
        break;
      case 82:
        this.$ = $$[$0 - 4];
        this.$.push(new yy.ast.OrderByItem($$[$0 - 2], $$[$0 - 1], $$[$0]));
        break;
      case 83:
        this.$ = [void 0, $$[$0]];
        break;
      case 84:
      case 85:
        this.$ = [$$[$0], void 0];
        break;
      case 86:
        this.$ = [$$[$0], $$[$0 - 2]];
        break;
      case 87:
      case 222:
        this.$ = new yy.ast.ASTIdentifier($$[$0]);
        break;
      case 88:
        this.$ = new yy.ast.ASTIdentifier($$[$0 - 2], $$[$0]);
        break;
      case 89:
        this.$ = new yy.ast.ASTFieldSelector($$[$0]);
        break;
      case 90:
        this.$ = new yy.ast.ASTFieldSelector($$[$0].idOriginal, new yy.ast.ASTIdentifier($$[$0].schemaOriginal));
        break;
      case 91:
        this.$ = new yy.ast.ASTFieldSelector($$[$0 - 2], new yy.ast.ASTIdentifier($$[$0 - 3], $$[$0 - 4]));
        break;
      case 92:
        this.$ = new yy.ast.ASTFieldSelector("*", new yy.ast.ASTIdentifier($$[$0 - 1]));
        break;
      case 94:
        this.$ = yy.messageQueue.shift();
        break;
      case 97:
      case 98:
      case 99:
        this.$ = new yy.ast.ASTQuantifiedQuery($$[$0 - 3], $$[$0 - 1]);
        break;
      case 100:
        this.$ = new yy.ast.ASTLiteral($$[$0], true);
        break;
      case 101:
        this.$ = new yy.ast.ASTLiteral($$[$0], false);
        break;
      case 102:
        this.$ = new yy.ast.ASTLiteral($$[$0], null);
        break;
      case 103:
      case 104:
        this.$ = new yy.ast.ASTArray($$[$0 - 1]);
        break;
      case 105:
        this.$ = new yy.ast.ASTRow($$[$0 - 1]);
        break;
      case 106:
        this.$ = new yy.ast.ASTRow([]);
        break;
      case 107:
        this.$ = new yy.ast.ASTRow($$[$0]);
        $$[$0].unshift($$[$0 - 2]);
        break;
      case 108:
        this.$ = new yy.ast.ASTRow($$[$0 - 1]);
        $$[$0 - 1].unshift($$[$0 - 3]);
        break;
      case 110:
        this.$ = new yy.ast.ASTParam($$[$0]);
        break;
      case 111:
        this.$ = new yy.ast.ASTNumberLiteral($$[$0]);
        break;
      case 112:
        this.$ = new yy.ast.ASTStringLiteral($$[$0]);
        break;
      case 113:
        this.$ = new yy.ast.ASTCast(new yy.ast.ASTStringLiteral($$[$0]), $$[$0 - 1]);
        break;
      case 122:
        this.$ = new yy.ast.ASTAggregate($$[$0 - 4], $$[$0 - 2], null, null, $$[$0]);
        break;
      case 123:
        this.$ = new yy.ast.ASTAggregate($$[$0 - 5], $$[$0 - 3], null, $$[$0 - 2], $$[$0]);
        break;
      case 124:
        this.$ = new yy.ast.ASTAggregate($$[$0 - 6], $$[$0 - 3], $$[$0 - 4], $$[$0 - 2], $$[$0]);
        break;
      case 125:
        this.$ = new yy.ast.ASTAggregate($$[$0 - 10], $$[$0 - 8], null, $$[$0 - 2], $$[$0], $$[$0 - 3]);
        break;
      case 126:
        this.$ = new yy.ast.ASTAggregate($$[$0 - 9], [], null, $$[$0 - 2], $$[$0], $$[$0 - 3]);
        break;
      case 127:
        this.$ = new yy.ast.ASTWindowFunction($$[$0 - 5], [], $$[$0], $$[$0 - 2]);
        break;
      case 128:
        this.$ = new yy.ast.ASTWindowFunction($$[$0 - 6], $$[$0 - 4], $$[$0], $$[$0 - 2]);
        break;
      case 129:
        this.$ = new yy.ast.ASTFunction("sql", $$[$0 - 2], []);
        break;
      case 130:
        this.$ = new yy.ast.ASTFunction("sql", $$[$0 - 3], [$$[$0 - 1]]);
        break;
      case 131:
        this.$ = new yy.ast.ASTFunction("sql", $$[$0 - 3], $$[$0 - 1]);
        break;
      case 137:
        this.$ = $$[$0 - 1] ? $$[$0 - 1] : new yy.ast.WindowSpec();
        this.$.columns = $$[$0 - 3];
        this.$.parent = $$[$0 - 6];
        this.$.order = $$[$0 - 2];
        break;
      case 138:
        this.$ = $$[$0 - 1] ? $$[$0 - 1] : new yy.ast.WindowSpec();
        this.$.columns = $$[$0 - 2];
        this.$.parent = $$[$0 - 5];
        break;
      case 139:
        this.$ = new yy.ast.WindowSpec(null, $$[$0 - 2], $$[$0 - 1], null, $$[$0]?.slice(7));
        break;
      case 140:
        this.$ = new yy.ast.WindowSpec(null, $$[$0 - 5], $$[$0 - 3], $$[$0 - 1], $$[$0]?.slice(7));
        break;
      case 144:
      case 149:
        this.$ = Infinity;
        break;
      case 146:
      case 147:
        this.$ = 0;
        break;
      case 150:
        this.$ = "group";
        break;
      case 151:
        this.$ = "ties";
        break;
      case 152:
        this.$ = "noothers";
        break;
      case 153:
        this.$ = "currentrow";
        break;
      case 156:
        this.$ = [$$[$0 - 1] ?? []];
        break;
      case 157:
        this.$ = $$[$0 - 4];
        this.$.push($$[$0 - 1] ?? []);
        break;
      case 159:
        this.$ = new yy.ast.ASTCast($$[$0 - 4], $$[$0 - 2], !!$$[$0 - 1]);
        break;
      case 160:
        this.$ = new yy.ast.ASTCast($$[$0 - 3], $$[$0 - 1], !!$$[$0]);
        break;
      case 162:
        this.$ = new yy.ast.ASTSubscript($$[$0 - 3], $$[$0 - 1]);
        break;
      case 163:
        this.$ = new yy.ast.ASTSubscript($$[$0 - 5], $$[$0 - 3], $$[$0 - 1]);
        break;
      case 165:
        this.$ = yy.makeOp($$[$0 - 1], [$$[$0]]);
        break;
      case 169:
      case 174:
      case 176:
      case 177:
      case 181:
      case 198:
      case 208:
      case 210:
        this.$ = yy.makeOp($$[$0 - 1], [$$[$0 - 2], $$[$0]]);
        break;
      case 182:
        this.$ = yy.makeOp($$[$0 - 2], [$$[$0 - 5], $$[$0]]);
        break;
      case 186:
        this.$ = yy.wrapNot(yy.makeOp($$[$0 - 3], [$$[$0 - 5], $$[$0 - 2], $$[$0]]), $$[$0 - 4]);
        break;
      case 187:
      case 188:
        this.$ = yy.wrapNot(yy.makeOp($$[$0 - 3], [$$[$0 - 5], $$[$0 - 1]]), $$[$0 - 4]);
        break;
      case 189:
      case 190:
        this.$ = yy.wrapNot(yy.makeOp($$[$0 - 1], [$$[$0 - 3], $$[$0]]), $$[$0 - 2]);
        break;
      case 202:
        this.$ = yy.wrapNot(yy.makeOp($$[$0 - 2], [$$[$0 - 3], $$[$0]]), $$[$0 - 1]);
        break;
      case 203:
        this.$ = yy.wrapNot(yy.makeOp("DISTINCT FROM", [$$[$0 - 5], $$[$0]]), $$[$0 - 3]);
        break;
      case 204:
        this.$ = new yy.ast.ASTExists($$[$0 - 1]);
        break;
      case 206:
        this.$ = yy.wrapNot($$[$0], $$[$0 - 1]);
        break;
      case 212:
        this.$ = new yy.ast.ASTCase($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);
        break;
      case 213:
        this.$ = [[$$[$0 - 2], $$[$0]]];
        break;
      case 214:
        this.$ = $$[$0 - 4];
        this.$.push([$$[$0 - 2], $$[$0]]);
        break;
      case 217:
        this.$ = [];
        break;
      case 224:
        this.$ = new yy.ast.ASTTableAlias($$[$0]);
        break;
      case 225:
        this.$ = new yy.ast.ASTTableAlias($$[$0 - 3], $$[$0 - 1]);
        break;
    }
  }
}
Object.defineProperty(sql, "__esModule", { value: true });
var sqlParser_1 = sql.sqlParser = sqlParser;
const { JisonLexer } = require$$1;
class sqlLexer extends JisonLexer {
  constructor(yy = {}) {
    super(yy);
    this.options = { "case-insensitive": true, "easy_keyword_rules": true, "ranges": true, "moduleName": "sql" };
    this.rules = [
      /^(?:,)/i,
      /^(?:\.\*)/i,
      /^(?:\.)/i,
      /^(?:\()/i,
      /^(?:\))/i,
      /^(?:\[\])/i,
      /^(?:\[)/i,
      /^(?:\])/i,
      /^(?:\})/i,
      /^(?:\*)/i,
      /^(?:;)/i,
      /^(?::)/i,
      /^(?:::)/i,
      /^(?:\+)/i,
      /^(?:-)/i,
      /^(?:\/)/i,
      /^(?:%)/i,
      /^(?:\^)/i,
      /^(?:=)/i,
      /^(?:!=|<>)/i,
      /^(?:>)/i,
      /^(?:<)/i,
      /^(?:>=)/i,
      /^(?:<=)/i,
      /^(?:SELECT\b)/i,
      /^(?:ALL\b)/i,
      /^(?:DISTINCT\b)/i,
      /^(?:AS\b)/i,
      /^(?:FROM\b)/i,
      /^(?:WHERE\b)/i,
      /^(?:GROUP\b)/i,
      /^(?:ROLLUP\b)/i,
      /^(?:CUBE\b)/i,
      /^(?:GROUPING\s+SETS\b)/i,
      /^(?:HAVING\b)/i,
      /^(?:UNION\b)/i,
      /^(?:INTERSECT\b)/i,
      /^(?:EXCEPT\b)/i,
      /^(?:ORDER\s+BY\b)/i,
      /^(?:LIMIT\b)/i,
      /^(?:OFFSET\b)/i,
      /^(?:JOIN\b)/i,
      /^(?:INNER\b)/i,
      /^(?:LEFT\b)/i,
      /^(?:RIGHT\b)/i,
      /^(?:FULL\b)/i,
      /^(?:OUTER\b)/i,
      /^(?:ON\b)/i,
      /^(?:CROSS\b)/i,
      /^(?:NATURAL\b)/i,
      /^(?:LATERAL\b)/i,
      /^(?:USING\b)/i,
      /^(?:EXISTS\b)/i,
      /^(?:VALUES\b)/i,
      /^(?:WITHIN\b)/i,
      /^(?:FILTER\b)/i,
      /^(?:ORDINALITY\b)/i,
      /^(?:WITH\b)/i,
      /^(?:RECURSIVE\b)/i,
      /^(?:SEARCH\b)/i,
      /^(?:BREADTH\b)/i,
      /^(?:DEPTH\b)/i,
      /^(?:SET\b)/i,
      /^(?:BY\b)/i,
      /^(?:CYCLE\b)/i,
      /^(?:TO\b)/i,
      /^(?:DEFAULT\b)/i,
      /^(?:MATERIALIZED\b)/i,
      /^(?:OVER\b)/i,
      /^(?:PARTITION\b)/i,
      /^(?:RANGE\b)/i,
      /^(?:ROWS\b)/i,
      /^(?:GROUPS\b)/i,
      /^(?:UNBOUNDED\b)/i,
      /^(?:PRECEDING\b)/i,
      /^(?:FOLLOWING\b)/i,
      /^(?:CURRENT\b)/i,
      /^(?:EXCLUDE\b)/i,
      /^(?:TIES\b)/i,
      /^(?:NO\s+OTHERS\b)/i,
      /^(?:WINDOW\b)/i,
      /^(?:CASE\b)/i,
      /^(?:WHEN\b)/i,
      /^(?:THEN\b)/i,
      /^(?:ELSE\b)/i,
      /^(?:END\b)/i,
      /^(?:AND\b)/i,
      /^(?:OR\b)/i,
      /^(?:NOT\b)/i,
      /^(?:IS\b)/i,
      /^(?:NULL\b)/i,
      /^(?:TRUE\b)/i,
      /^(?:FALSE\b)/i,
      /^(?:BETWEEN\b)/i,
      /^(?:IN\b)/i,
      /^(?:LIKE\b)/i,
      /^(?:ILIKE\b)/i,
      /^(?:CAST\b)/i,
      /^(?:OPERATOR\b)/i,
      /^(?:ASC\b)/i,
      /^(?:DESC\b)/i,
      /^(?:ARRAY\b)/i,
      /^(?:ANY|SOME)/i,
      /^(?:NULLS\b)/i,
      /^(?:FIRST\b)/i,
      /^(?:LAST\b)/i,
      /^(?:ROW\b)/i,
      /^(?:LANG\s+EXIT\b)/i,
      /^(?:LANG\s+[0-9a-z_$]+)/i,
      /^(?:[a-z_][0-9a-z_$]*)/i,
      /^(?:["][a-z_][0-9a-z_$]*["])/i,
      /^(?:0x[0-9a-fA-F]+)/i,
      /^(?:0b[01]+)/i,
      /^(?:0o[0-7]+)/i,
      /^(?:[0-9]+)/i,
      /^(?:['](?:[^']|[']['])*['])/i,
      /^(?:\$)/i,
      /^(?:\$)/i,
      /^(?:.)/i,
      /^(?:$)/i,
      /^(?:$)/i,
      /^(?:.)/i,
      /^(?:--)/i,
      /^(?:\n)/i,
      /^(?:.)/i,
      /^(?:\/\*)/i,
      /^(?:\/\*)/i,
      /^(?:\*\/)/i,
      /^(?:.)/i,
      /^(?:$)/i,
      /^(?:[+*/<>=-]+[*/<>=])/i,
      /^(?:[+*/<>=~!@#%^&|`?-]*[~!@#%^&|`?][+*/<>=~!@#%^&|`?-]*)/i,
      /^(?:\s+)/i
    ];
    this.conditions = { "blockc": { "rules": [126, 127, 128, 129], "inclusive": false }, "linec": { "rules": [123, 124], "inclusive": false }, "dollarInner": { "rules": [120, 121], "inclusive": false }, "dollarPreamble": { "rules": [117, 118, 119], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 125, 130, 131, 132], "inclusive": true } };
  }
  performAction(yy, yy_, $avoiding_name_collisions, YY_START) {
    switch ($avoiding_name_collisions) {
      case 0:
        return this.yy.AdditionalTokens.COMMA;
      case 1:
        return this.yy.AdditionalTokens.DOTSTAR;
      case 2:
        return this.yy.AdditionalTokens.DOT;
      case 3:
        return this.yy.AdditionalTokens.LPAR;
      case 4:
        this.yy.saveRemainingInput(")" + this._input);
        return this.yy.AdditionalTokens.RPAR;
      case 5:
        return this.yy.AdditionalTokens.CLOSEDBRAS;
      case 6:
        return this.yy.AdditionalTokens.LBRA;
      case 7:
        this.yy.saveRemainingInput("]" + this._input);
        return this.yy.AdditionalTokens.RBRA;
      case 8:
        this.yy.saveRemainingInput("}" + this._input);
        return this.yy.AdditionalTokens.RCUR;
      case 9:
        return this.yy.AdditionalTokens.STAR;
      case 10:
        return this.yy.AdditionalTokens.SEMICOLON;
      case 11:
        return this.yy.AdditionalTokens.COLON;
      case 12:
        return this.yy.AdditionalTokens.DBLCOLON;
      case 13:
        return this.yy.AdditionalTokens.PLUS;
      case 14:
        return this.yy.AdditionalTokens.MINUS;
      case 15:
        return this.yy.AdditionalTokens.DIV;
      case 16:
        return this.yy.AdditionalTokens.MOD;
      case 17:
        return this.yy.AdditionalTokens.EXP;
      case 18:
        return this.yy.AdditionalTokens.EQ;
      case 19:
        return this.yy.AdditionalTokens.NEQ;
      case 20:
        return this.yy.AdditionalTokens.GT;
      case 21:
        return this.yy.AdditionalTokens.LT;
      case 22:
        return this.yy.AdditionalTokens.GTE;
      case 23:
        return this.yy.AdditionalTokens.LTE;
      case 24:
        return this.yy.Keywords.SELECT;
      case 25:
        return this.yy.Keywords.ALL;
      case 26:
        return this.yy.Keywords.DISTINCT;
      case 27:
        return this.yy.Keywords.AS;
      case 28:
        return this.yy.Keywords.FROM;
      case 29:
        return this.yy.Keywords.WHERE;
      case 30:
        return this.yy.Keywords.GROUP;
      case 31:
        return this.yy.Keywords.ROLLUP;
      case 32:
        return this.yy.Keywords.CUBE;
      case 33:
        return this.yy.Keywords.GROUPINGSETS;
      case 34:
        return this.yy.Keywords.HAVING;
      case 35:
        return this.yy.Keywords.UNION;
      case 36:
        return this.yy.Keywords.INTERSECT;
      case 37:
        return this.yy.Keywords.EXCEPT;
      case 38:
        return this.yy.Keywords.ORDERBY;
      case 39:
        return this.yy.Keywords.LIMIT;
      case 40:
        return this.yy.Keywords.OFFSET;
      case 41:
        return this.yy.Keywords.JOIN;
      case 42:
        return this.yy.Keywords.INNER;
      case 43:
        return this.yy.Keywords.LEFT;
      case 44:
        return this.yy.Keywords.RIGHT;
      case 45:
        return this.yy.Keywords.FULL;
      case 46:
        return this.yy.Keywords.OUTER;
      case 47:
        return this.yy.Keywords.ON;
      case 48:
        return this.yy.Keywords.CROSS;
      case 49:
        return this.yy.Keywords.NATURAL;
      case 50:
        return this.yy.Keywords.LATERAL;
      case 51:
        return this.yy.Keywords.USING;
      case 52:
        return this.yy.Keywords.EXISTS;
      case 53:
        return this.yy.Keywords.VALUES;
      case 54:
        return this.yy.Keywords.WITHIN;
      case 55:
        return this.yy.Keywords.FILTER;
      case 56:
        return this.yy.Keywords.ORDINALITY;
      case 57:
        return this.yy.Keywords.WITH;
      case 58:
        return this.yy.Keywords.RECURSIVE;
      case 59:
        return this.yy.Keywords.SEARCH;
      case 60:
        return this.yy.Keywords.BREADTH;
      case 61:
        return this.yy.Keywords.DEPTH;
      case 62:
        return this.yy.Keywords.SET;
      case 63:
        return this.yy.Keywords.BY;
      case 64:
        return this.yy.Keywords.CYCLE;
      case 65:
        return this.yy.Keywords.TO;
      case 66:
        return this.yy.Keywords.DEFAULT;
      case 67:
        return this.yy.Keywords.MATERIALIZED;
      case 68:
        return this.yy.Keywords.OVER;
      case 69:
        return this.yy.Keywords.PARTITION;
      case 70:
        return this.yy.Keywords.RANGE;
      case 71:
        return this.yy.Keywords.ROWS;
      case 72:
        return this.yy.Keywords.GROUPS;
      case 73:
        return this.yy.Keywords.UNBOUNDED;
      case 74:
        return this.yy.Keywords.PRECEDING;
      case 75:
        return this.yy.Keywords.FOLLOWING;
      case 76:
        return this.yy.Keywords.CURRENT;
      case 77:
        return this.yy.Keywords.EXCLUDE;
      case 78:
        return this.yy.Keywords.TIES;
      case 79:
        return this.yy.Keywords.NOOTHERS;
      case 80:
        return this.yy.Keywords.WINDOW;
      case 81:
        return this.yy.Keywords.CASE;
      case 82:
        return this.yy.Keywords.WHEN;
      case 83:
        return this.yy.Keywords.THEN;
      case 84:
        return this.yy.Keywords.ELSE;
      case 85:
        return this.yy.Keywords.END;
      case 86:
        return this.yy.Keywords.AND;
      case 87:
        return this.yy.Keywords.OR;
      case 88:
        return this.yy.Keywords.NOT;
      case 89:
        return this.yy.Keywords.IS;
      case 90:
        return this.yy.Keywords.NULL;
      case 91:
        return this.yy.Keywords.TRUE;
      case 92:
        return this.yy.Keywords.FALSE;
      case 93:
        return this.yy.Keywords.BETWEEN;
      case 94:
        return this.yy.Keywords.IN;
      case 95:
        return this.yy.Keywords.LIKE;
      case 96:
        return this.yy.Keywords.ILIKE;
      case 97:
        return this.yy.Keywords.CAST;
      case 98:
        return this.yy.Keywords.OPERATOR;
      case 99:
        return this.yy.Keywords.ASC;
      case 100:
        return this.yy.Keywords.DESC;
      case 101:
        return this.yy.Keywords.ARRAY;
      case 102:
        return this.yy.Keywords.ANY;
      case 103:
        return this.yy.Keywords.NULLS;
      case 104:
        return this.yy.Keywords.FIRST;
      case 105:
        return this.yy.Keywords.LAST;
      case 106:
        return this.yy.Keywords.ROW;
      case 107:
        this.yy.saveRemainingInput(this._input);
        return this.yy.AdditionalTokens.LANGEXIT;
      case 108:
        {
          const langName = yy_.yytext.slice(5);
          const lang = this.yy.langMgr.getLang(langName);
          if (!lang) {
            return new Error(`Unknown language: ${langName}`);
          }
          const nestedParser = lang.createParser(this.yy.langMgr);
          const res = nestedParser.parse(this._input);
          if (res instanceof Error) {
            return res;
          }
          this.yy.messageQueue.push(res.value);
          this._input = res.remainingInput;
          return this.yy.Keywords.LANGSWITCH;
        }
      case 109:
        return this.yy.AdditionalTokens.ID;
      case 110:
        return this.yy.AdditionalTokens.ID;
      case 111:
        return this.yy.AdditionalTokens.NUMBER;
      case 112:
        return this.yy.AdditionalTokens.NUMBER;
      case 113:
        return this.yy.AdditionalTokens.NUMBER;
      case 114:
        return this.yy.AdditionalTokens.NUMBER;
      case 115:
        return this.yy.AdditionalTokens.STRING;
      case 116:
        this.pushState("dollarPreamble");
        this.yy.strContent = "";
        this.yy.delimiter = yy_.yytext;
        break;
      case 117:
        this.popState();
        this.pushState("dollarInner");
        this.yy.delimiter += yy_.yytext;
        break;
      case 118:
        this.yy.delimiter += yy_.yytext;
        break;
      case 119:
        this.popState();
        return new Error("Unexpected end of file");
      case 120:
        this.popState();
        return new Error("Unexpected end of file");
      case 121:
        this.yy.strContent += yy_.yytext;
        if (this.yy.strContent.endsWith(this.yy.delimiter)) {
          this.popState();
          yy_.yytext = this.yy.strContent.slice(0, -this.yy.delimiter.length);
          return this.yy.AdditionalTokens.STRING;
        }
        break;
      case 122:
        this.pushState("linec");
        this.yy.comment = "--";
        break;
      case 123:
        this.yy.reportComment(this.yy.comment, { ...this.yyloc });
        this.popState();
        break;
      case 124:
        this.yy.comment += yy_.yytext;
        break;
      case 125:
        this.pushState("blockc");
        this.yy.comment = "/*";
        break;
      case 126:
        this.yy.comment += "/*";
        this.yy.commentDepth++;
        break;
      case 127:
        this.yy.comment += "*/";
        if (!this.yy.commentDepth) {
          this.popState();
          this.yy.reportComment(this.yy.comment, { ...this.yyloc });
        } else
          this.yy.commentDepth--;
        break;
      case 128:
        this.yy.comment += yy_.yytext;
        break;
      case 129:
        this.popState();
        return new Error("Unexpected end of file");
      case 130:
        return this.yy.AdditionalTokens.USEROP;
      case 131:
        return this.yy.AdditionalTokens.USEROP;
    }
  }
}
Object.defineProperty(sql, "__esModule", { value: true });
var sqlLexer_1 = sql.sqlLexer = sqlLexer;

var Keywords = /* @__PURE__ */ ((Keywords2) => {
  Keywords2["SELECT"] = "SELECT";
  Keywords2["ALL"] = "ALL";
  Keywords2["DISTINCT"] = "DISTINCT";
  Keywords2["AS"] = "AS";
  Keywords2["FROM"] = "FROM";
  Keywords2["WHERE"] = "WHERE";
  Keywords2["GROUP"] = "GROUP";
  Keywords2["ROLLUP"] = "ROLLUP";
  Keywords2["CUBE"] = "CUBE";
  Keywords2["GROUPINGSETS"] = "GROUPINGSETS";
  Keywords2["HAVING"] = "HAVING";
  Keywords2["UNION"] = "UNION";
  Keywords2["INTERSECT"] = "INTERSECT";
  Keywords2["EXCEPT"] = "EXCEPT";
  Keywords2["ORDERBY"] = "ORDERBY";
  Keywords2["LIMIT"] = "LIMIT";
  Keywords2["OFFSET"] = "OFFSET";
  Keywords2["JOIN"] = "JOIN";
  Keywords2["INNER"] = "INNER";
  Keywords2["LEFT"] = "LEFT";
  Keywords2["RIGHT"] = "RIGHT";
  Keywords2["FULL"] = "FULL";
  Keywords2["OUTER"] = "OUTER";
  Keywords2["ON"] = "ON";
  Keywords2["CROSS"] = "CROSS";
  Keywords2["NATURAL"] = "NATURAL";
  Keywords2["LATERAL"] = "LATERAL";
  Keywords2["USING"] = "USING";
  Keywords2["EXISTS"] = "EXISTS";
  Keywords2["VALUES"] = "VALUES";
  Keywords2["FILTER"] = "FILTER";
  Keywords2["WITHIN"] = "WITHIN";
  Keywords2["PARTITIONBY"] = "PARTITIONBY";
  Keywords2["RANGE"] = "RANGE";
  Keywords2["ROWS"] = "ROWS";
  Keywords2["GROUPS"] = "GROUPS";
  Keywords2["UNBOUNDED"] = "UNBOUNDED";
  Keywords2["PRECEDING"] = "PRECEDING";
  Keywords2["FOLLOWING"] = "FOLLOWING";
  Keywords2["CURRENT"] = "CURRENT";
  Keywords2["EXCLUDE"] = "EXCLUDE";
  Keywords2["TIES"] = "TIES";
  Keywords2["NOOTHERS"] = "NOOTHERS";
  Keywords2["WINDOW"] = "WINDOW";
  Keywords2["ORDINALITY"] = "ORDINALITY";
  Keywords2["WITH"] = "WITH";
  Keywords2["RECURSIVE"] = "RECURSIVE";
  Keywords2["SEARCH"] = "SEARCH";
  Keywords2["BREADTH"] = "BREADTH";
  Keywords2["DEPTH"] = "DEPTH";
  Keywords2["SET"] = "SET";
  Keywords2["BY"] = "BY";
  Keywords2["CYCLE"] = "CYCLE";
  Keywords2["TO"] = "TO";
  Keywords2["DEFAULT"] = "DEFAULT";
  Keywords2["MATERIALIZED"] = "MATERIALIZED";
  Keywords2["CASE"] = "CASE";
  Keywords2["WHEN"] = "WHEN";
  Keywords2["THEN"] = "THEN";
  Keywords2["ELSE"] = "ELSE";
  Keywords2["END"] = "END";
  Keywords2["AND"] = "AND";
  Keywords2["OR"] = "OR";
  Keywords2["NOT"] = "NOT";
  Keywords2["IS"] = "IS";
  Keywords2["NULL"] = "NULL";
  Keywords2["TRUE"] = "TRUE";
  Keywords2["FALSE"] = "FALSE";
  Keywords2["BETWEEN"] = "BETWEEN";
  Keywords2["IN"] = "IN";
  Keywords2["LIKE"] = "LIKE";
  Keywords2["ILIKE"] = "ILIKE";
  Keywords2["CAST"] = "CAST";
  Keywords2["OPERATOR"] = "OPERATOR";
  Keywords2["ASC"] = "ASC";
  Keywords2["DESC"] = "DESC";
  Keywords2["NULLS"] = "NULLS";
  Keywords2["FIRST"] = "FIRST";
  Keywords2["LAST"] = "LAST";
  Keywords2["ARRAY"] = "ARRAY";
  Keywords2["ANY"] = "ANY";
  Keywords2["ROW"] = "ROW";
  return Keywords2;
})(Keywords || {});
var AdditionalTokens = /* @__PURE__ */ ((AdditionalTokens2) => {
  AdditionalTokens2["NUMBER"] = "NUMBER";
  AdditionalTokens2["STRING"] = "STRING";
  AdditionalTokens2["ID"] = "ID";
  AdditionalTokens2["PARAM"] = "PARAM";
  AdditionalTokens2["COMMA"] = "COMMA";
  AdditionalTokens2["DOT"] = "DOT";
  AdditionalTokens2["DOTSTAR"] = "DOTSTAR";
  AdditionalTokens2["LPAR"] = "LPAR";
  AdditionalTokens2["RPAR"] = "RPAR";
  AdditionalTokens2["LBRA"] = "LBRA";
  AdditionalTokens2["RBRA"] = "RBRA";
  AdditionalTokens2["RCUR"] = "RCUR";
  AdditionalTokens2["CLOSEDBRAS"] = "CLOSEDBRAS";
  AdditionalTokens2["SEMICOLON"] = "SEMICOLON";
  AdditionalTokens2["COLON"] = "COLON";
  AdditionalTokens2["DBLCOLON"] = "DBLCOLON";
  AdditionalTokens2["PLUS"] = "PLUS";
  AdditionalTokens2["MINUS"] = "MINUS";
  AdditionalTokens2["STAR"] = "STAR";
  AdditionalTokens2["DIV"] = "DIV";
  AdditionalTokens2["MOD"] = "MOD";
  AdditionalTokens2["EXP"] = "EXP";
  AdditionalTokens2["EQ"] = "EQ";
  AdditionalTokens2["NEQ"] = "NEQ";
  AdditionalTokens2["GT"] = "GT";
  AdditionalTokens2["GTE"] = "GTE";
  AdditionalTokens2["LT"] = "LT";
  AdditionalTokens2["LTE"] = "LTE";
  AdditionalTokens2["USEROP"] = "USEROP";
  AdditionalTokens2["LANGSWITCH"] = "LANGSWITCH";
  AdditionalTokens2["LANGEXIT"] = "LANGEXIT";
  return AdditionalTokens2;
})(AdditionalTokens || {});

function parseStringLiteral(original) {
  if (original[0] === "$") {
    return parseDollarQuoted(original);
  }
  let value = "";
  const escRegex = /^[bfnrt\\]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{1,3}/g;
  for (let i = 1; i < original.length - 1; i++) {
    const c = original[i];
    let match;
    if (c === "\\" && (match = original.slice(i).match(escRegex))) {
      i += match[0].length;
      value += interpretEscape(match[0]);
    } else if (c === "" && original[i + 1] === "") {
      i++;
      value += "'";
    } else {
      value += c;
    }
  }
  return value;
}
function parseDollarQuoted(original) {
  const second$ = original.indexOf("$", 1);
  return original.slice(second$ + 1, -second$ - 1);
}
function interpretEscape(esc) {
  let code;
  switch (esc[0]) {
    case "b":
      return "\b";
    case "f":
      return "\f";
    case "n":
      return "\n";
    case "r":
      return "\r";
    case "t":
      return "	";
    case "\\":
      return "\\";
    case "x":
      code = parseInt(esc.slice(1), 16);
      return String.fromCharCode(code);
    case "u":
    case "U":
      code = parseInt(esc.slice(1), 16);
      return String.fromCodePoint(code);
    default:
      code = parseInt(esc, 8);
      if (isNaN(code)) {
        return esc;
      }
      return String.fromCharCode(code);
  }
}
function parseIdentifier(original) {
  return original && (original[0] === '"' || original[0] === "$" ? parseStringLiteral(original) : original.toLowerCase());
}

var __defProp$4 = Object.defineProperty;
var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$4 = (obj, key, value) => {
  __defNormalProp$4(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class ASTStringLiteral extends ASTLiteral {
  constructor(original) {
    super(original, null);
    this.original = original;
    this.value = parseStringLiteral(original);
  }
  accept(visitor) {
    visitor.visitStringLiteral(this);
  }
}
class ASTIdentifier {
  constructor(idOriginal, schemaOriginal) {
    this.idOriginal = idOriginal;
    this.schemaOriginal = schemaOriginal;
    __publicField$4(this, "id");
    __publicField$4(this, "schema");
    this.id = parseIdentifier(idOriginal);
    this.schema = schemaOriginal && parseIdentifier(schemaOriginal);
  }
  accept(visitor) {
    visitor.visitIdentifier(this);
  }
}
class ASTNumberLiteral extends ASTLiteral {
  constructor(original) {
    super(original, +original);
    this.original = original;
  }
  accept(visitor) {
    visitor.visitNumberLiteral(this);
  }
}
class ASTArray {
  constructor(items) {
    this.items = items;
  }
  accept(visitor) {
    visitor.visitArray(this);
  }
  static fromString(str) {
    return new ASTArray([]);
  }
}
class ASTRow {
  constructor(items) {
    this.items = items;
  }
  accept(visitor) {
    visitor.visitRow(this);
  }
}
class ASTParam {
  constructor(name) {
    this.name = name;
  }
  accept(visitor) {
    visitor.visitParam(this);
  }
}
class ASTCast {
  constructor(expr, type, isArray = false) {
    this.expr = expr;
    this.type = type;
  }
  accept(visitor) {
    visitor.visitCast(this);
  }
}
class ASTSubscript {
  constructor(expr, from, to) {
    this.expr = expr;
    this.from = from;
    this.to = to;
  }
  accept(visitor) {
    visitor.visitSubscript(this);
  }
}
class ASTExists {
  constructor(query) {
    this.query = query;
  }
  accept(visitor) {
    visitor.visitExists(this);
  }
}
var QuantifierType = /* @__PURE__ */ ((QuantifierType2) => {
  QuantifierType2["ALL"] = "all";
  QuantifierType2["ANY"] = "any";
  return QuantifierType2;
})(QuantifierType || {});
class ASTQuantifier {
  constructor(quantifier, query) {
    this.quantifier = quantifier;
    this.query = query;
    this.quantifier = quantifier.toLowerCase();
  }
  accept(visitor) {
    visitor.visitQuantifier(this);
  }
}
class ASTCase {
  constructor(expr, whenThen, elseExpr) {
    this.expr = expr;
    this.whenThen = whenThen;
    this.elseExpr = elseExpr;
  }
  accept(visitor) {
    visitor.visitCase(this);
  }
}
class ASTAggregate extends ASTFunction {
  constructor(id, args, distinct, orderBy, filter, withinGroupArgs) {
    super("sql", id, args);
    this.orderBy = orderBy;
    this.filter = filter;
    this.withinGroupArgs = withinGroupArgs;
    __publicField$4(this, "distinct");
    this.distinct = distinct?.toLowerCase() === "distinct";
  }
  accept(visitor) {
    visitor.visitAggregate(this);
  }
}
class ASTWindowFn extends ASTAggregate {
  constructor(id, args, window, filter) {
    super(id, args, null, null, filter);
    this.window = window;
  }
  accept(visitor) {
    visitor.visitWindowFn(this);
  }
}

var __defProp$3 = Object.defineProperty;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$3 = (obj, key, value) => {
  __defNormalProp$3(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class ASTTableAlias {
  constructor(nameOriginal, columnsOriginal) {
    this.nameOriginal = nameOriginal;
    this.columnsOriginal = columnsOriginal;
    __publicField$3(this, "name");
    __publicField$3(this, "columns");
    __publicField$3(this, "table");
    this.name = parseIdentifier(nameOriginal);
    this.columns = columnsOriginal?.map(parseIdentifier);
  }
  accept(visitor) {
    return visitor.visitTableAlias(this);
  }
}
class ASTFieldSelector {
  constructor(fieldOriginal, table) {
    this.fieldOriginal = fieldOriginal;
    this.table = table;
    __publicField$3(this, "field");
    this.field = parseIdentifier(fieldOriginal);
  }
  accept(visitor) {
    return visitor.visitFieldSelector(this);
  }
}
class ASTExpressionAlias {
  constructor(expression, aliasOriginal) {
    this.expression = expression;
    this.aliasOriginal = aliasOriginal;
    __publicField$3(this, "alias");
    this.alias = parseIdentifier(aliasOriginal);
  }
  accept(visitor) {
    return visitor.visitExpressionAlias(this);
  }
}

var __defProp$2 = Object.defineProperty;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$2 = (obj, key, value) => {
  __defNormalProp$2(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class SelectStatement {
  constructor(selectSet, orderBy, limit, offset, withQueries) {
    this.selectSet = selectSet;
    this.orderBy = orderBy;
    this.limit = limit;
    this.offset = offset;
    this.withQueries = withQueries;
  }
  accept(visitor) {
    visitor.visitSelectStatement(this);
  }
}
class SelectSet {
  constructor(items, from, where, groupBy, having, distinct = false, windows) {
    this.items = items;
    this.from = from;
    this.where = where;
    this.groupBy = groupBy;
    this.having = having;
    this.distinct = distinct;
    this.windows = windows;
    __publicField$2(this, "setOp");
  }
  accept(visitor) {
    visitor.visitSelectSet(this);
  }
}
var SelectSetOpType = /* @__PURE__ */ ((SelectSetOpType2) => {
  SelectSetOpType2["UNION"] = "union";
  SelectSetOpType2["INTERSECT"] = "intersect";
  SelectSetOpType2["EXCEPT"] = "except";
  return SelectSetOpType2;
})(SelectSetOpType || {});
class SelectSetOp {
  constructor(next, distinct, type) {
    this.next = next;
    __publicField$2(this, "type");
    __publicField$2(this, "distinct");
    this.distinct = distinct?.toLowerCase() === "distinct";
    this.type = type.toLowerCase();
  }
  accept(visitor) {
    visitor.visitSelectSetOp(this);
  }
}
class OrderByItem {
  constructor(expression, direction, nullsFirst) {
    this.expression = expression;
    this.nullsFirst = nullsFirst;
    __publicField$2(this, "ascending");
    this.ascending = direction === void 0 || direction.toLowerCase() === "asc";
    if (nullsFirst === void 0) {
      this.nullsFirst = !this.ascending;
    }
  }
  accept(visitor) {
    visitor.visitOrderByItem(this);
  }
}
var GroupByType = /* @__PURE__ */ ((GroupByType2) => {
  GroupByType2["BASIC"] = "basic";
  GroupByType2["ROLLUP"] = "rollup";
  GroupByType2["CUBE"] = "cube";
  GroupByType2["GROUPINGSETS"] = "groupingsets";
  return GroupByType2;
})(GroupByType || {});
class GroupByClause {
  constructor(items, type) {
    this.items = items;
    this.type = type;
  }
  accept(visitor) {
    visitor.visitGroupByClause(this);
  }
}
var JoinType = /* @__PURE__ */ ((JoinType2) => {
  JoinType2["INNER"] = "inner";
  JoinType2["LEFT"] = "left";
  JoinType2["RIGHT"] = "right";
  JoinType2["FULL"] = "full";
  JoinType2["CROSS"] = "cross";
  return JoinType2;
})(JoinType || {});
class JoinClause {
  constructor(table, joinType, joinCond, lateral = false) {
    this.table = table;
    this.joinType = joinType;
    this.lateral = lateral;
    __publicField$2(this, "condition");
    __publicField$2(this, "using");
    __publicField$2(this, "natural", false);
    if (joinCond instanceof Array || joinCond instanceof ASTTableAlias) {
      this.using = joinCond;
    } else {
      this.condition = joinCond;
    }
  }
  accept(visitor) {
    visitor.visitJoinClause(this);
  }
}
class JoinUsing {
  constructor(columns) {
    this.columns = columns;
  }
  accept(visitor) {
    visitor.visitJoinUsing(this);
  }
}
class ValuesClause {
  constructor(values) {
    this.values = values;
  }
  accept(visitor) {
    visitor.visitValues(this);
  }
}
class TableFn extends ASTFunction {
  constructor(id, args, withOrdinality = false) {
    super("sql", id, args);
    this.withOrdinality = withOrdinality;
  }
  accept(visitor) {
    visitor.visitTableFn(this);
  }
}
class RowsFrom {
  constructor(tableFns, withOrdinality = false) {
    this.tableFns = tableFns;
    this.withOrdinality = withOrdinality;
  }
  accept(visitor) {
    visitor.visitRowsFrom(this);
  }
}

var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var FrameMode = /* @__PURE__ */ ((FrameMode2) => {
  FrameMode2["RANGE"] = "range";
  FrameMode2["ROWS"] = "rows";
  FrameMode2["GROUPS"] = "groups";
  return FrameMode2;
})(FrameMode || {});
var FrameExclusion = /* @__PURE__ */ ((FrameExclusion2) => {
  FrameExclusion2["NO_OTHERS"] = "noothers";
  FrameExclusion2["TIES"] = "ties";
  FrameExclusion2["CURRENT_ROW"] = "currentrow";
  FrameExclusion2["GROUP"] = "group";
  return FrameExclusion2;
})(FrameExclusion || {});
class WindowSpec {
  constructor(mode, start, end, exclude = "noothers" /* NO_OTHERS */) {
    this.start = start;
    this.end = end;
    this.exclude = exclude;
    __publicField$1(this, "mode", "rows" /* ROWS */);
    __publicField$1(this, "parent");
    __publicField$1(this, "order");
    __publicField$1(this, "columns");
    this.mode = mode && mode.toLowerCase();
  }
  accept(visitor) {
    visitor.visitWindowSpec(this);
  }
}

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var SearchType = /* @__PURE__ */ ((SearchType2) => {
  SearchType2["DFS"] = "bfs";
  SearchType2["BFS"] = "dfs";
  return SearchType2;
})(SearchType || {});
class WithQuery {
  constructor(name, colNames, query, materialized) {
    this.name = name;
    this.colNames = colNames;
    this.query = query;
    this.materialized = materialized;
    __publicField(this, "searchCols");
    __publicField(this, "searchType");
    __publicField(this, "searchName");
    __publicField(this, "cycleCols");
    __publicField(this, "cycleMarkName");
    __publicField(this, "cyclePathName");
    __publicField(this, "cycleMarkVal");
    __publicField(this, "cycleMarkDefault");
  }
  accept(visitor) {
    visitor.visitWithQuery(this);
  }
}

var ast = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ASTAggregate: ASTAggregate,
  ASTArray: ASTArray,
  ASTCase: ASTCase,
  ASTCast: ASTCast,
  ASTExists: ASTExists,
  ASTExpressionAlias: ASTExpressionAlias,
  ASTFieldSelector: ASTFieldSelector,
  ASTIdentifier: ASTIdentifier,
  ASTNumberLiteral: ASTNumberLiteral,
  ASTParam: ASTParam,
  ASTQuantifier: ASTQuantifier,
  ASTRow: ASTRow,
  ASTStringLiteral: ASTStringLiteral,
  ASTSubscript: ASTSubscript,
  ASTTableAlias: ASTTableAlias,
  ASTWindowFn: ASTWindowFn,
  FrameExclusion: FrameExclusion,
  FrameMode: FrameMode,
  GroupByClause: GroupByClause,
  GroupByType: GroupByType,
  JoinClause: JoinClause,
  JoinType: JoinType,
  JoinUsing: JoinUsing,
  OrderByItem: OrderByItem,
  QuantifierType: QuantifierType,
  RowsFrom: RowsFrom,
  SearchType: SearchType,
  SelectSet: SelectSet,
  SelectSetOp: SelectSetOp,
  SelectSetOpType: SelectSetOpType,
  SelectStatement: SelectStatement,
  TableFn: TableFn,
  ValuesClause: ValuesClause,
  WindowSpec: WindowSpec,
  WithQuery: WithQuery
});

const coalesce = {
  name: "coalesce",
  impl: (...args) => {
    for (const arg of args) {
      if (arg !== null && arg !== void 0) {
        return arg;
      }
    }
    return null;
  }
};

const sum = {
  name: "sum",
  init: () => 0,
  step: (state, value) => state + value,
  stepInverse: (state, value) => state - value,
  result: (state) => state
};

const count = {
  name: "count",
  init: () => 0,
  step: (state, value) => state + 1,
  stepInverse: (state, value) => state - 1,
  result: (state) => state
};

const SQL = {
  name: "sql",
  operators: [],
  aggregates: [sum, count],
  functions: [coalesce],
  createParser
};
function createParser(mgr) {
  let remainingInput = "";
  const yy = {
    Keywords,
    AdditionalTokens,
    reportComment: () => {
    },
    commentDepth: 0,
    comment: "",
    strContent: "",
    delimiter: "",
    langMgr: mgr,
    messageQueue: [],
    saveRemainingInput: (input) => remainingInput = input,
    wrapNot: (expr, not) => not ? new ASTOperator("sql", new ASTIdentifier("NOT"), [expr]) : expr,
    makeOp: (op, args) => typeof op === "string" ? new ASTOperator("sql", new ASTIdentifier(op), args) : new ASTOperator("sql", op, args),
    allFrom: (src) => new SelectSet([new yy.ast.ASTFieldSelector("*"), src]),
    ast: {
      ...ast,
      ASTLiteral,
      ASTOperator,
      ASTFunction
    }
  };
  const parser = new sqlParser_1(yy, new sqlLexer_1(yy));
  return {
    parse: (input) => {
      const result = parser.parse(input);
      return {
        value: result,
        remainingInput
      };
    }
  };
}

const db = new DortDB({
  mainLang: SQL
});
const res = db.parse(
  "SELECT bar('foo', 13 * a.b), o FROM test WHERE a > 3; ) foo bar baz"
);
console.log(res);

export { ASTAggregate, ASTArray, ASTCase, ASTCast, ASTExists, ASTExpressionAlias, ASTFieldSelector, ASTIdentifier, ASTNumberLiteral, ASTParam, ASTQuantifier, ASTRow, ASTStringLiteral, ASTSubscript, ASTTableAlias, ASTWindowFn, FrameExclusion, FrameMode, GroupByClause, GroupByType, JoinClause, JoinType, JoinUsing, OrderByItem, QuantifierType, RowsFrom, SQL, SearchType, SelectSet, SelectSetOp, SelectSetOpType, SelectStatement, TableFn, ValuesClause, WindowSpec, WithQuery };
//# sourceMappingURL=index.js.map
