{"version":3,"file":"index.js","sources":["../src/ast.ts","../src/utils/make-path.ts","../src/lang-manager.ts","../src/operators/arithmetic.ts","../src/operators/index.ts","../src/extension.ts","../src/db.ts"],"sourcesContent":["export interface ASTNode {\n  accept(visitor: ASTVisitor): void;\n}\n\nexport class ASTLiteral<T> implements ASTNode {\n  constructor(public original: string, public value: T) {}\n\n  accept(visitor: ASTVisitor): void {\n    visitor.acceptLiteral(this);\n  }\n}\n\nexport class ASTOperator implements ASTNode {\n  constructor(\n    public lang: string,\n    public id: ASTIdentifier,\n    public operands: ASTNode[]\n  ) {}\n\n  accept(visitor: ASTVisitor): void {\n    visitor.acceptOperator(this);\n  }\n}\n\nexport class ASTFunction implements ASTNode {\n  constructor(\n    public lang: string,\n    public id: ASTIdentifier,\n    public args: ASTNode[]\n  ) {}\n\n  accept(visitor: ASTVisitor): void {\n    visitor.acceptFunction(this);\n  }\n}\n\nexport interface ASTIdentifier extends ASTNode {\n  schema?: string;\n  id: string;\n}\n\nexport interface ASTVisitor {\n  acceptLiteral<T>(literal: ASTLiteral<T>): void;\n  acceptOperator(op: ASTOperator): void;\n  acceptFunction(fn: ASTFunction): void;\n}\n","export function makePath(src: any, ...parts: (string | symbol)[]) {\n  for (const part of parts) {\n    if (!(part in src)) {\n      src[part] = {};\n    }\n    src = src[part];\n  }\n}\n","import { AggregateFn, Extension, Fn, Operator } from './extension.js';\nimport { makePath } from './utils/make-path.js';\n\nexport interface Parser {\n  parse: (input: string) => ParseResult;\n}\nexport interface ParseResult {\n  value: any;\n  remainingInput: string;\n}\nexport interface Language<Name extends string = string> {\n  readonly name: Lowercase<Name>;\n  operators: Operator[];\n  functions: Fn[];\n  aggregates: AggregateFn[];\n  createParser: (mgr: LanguageManager) => Parser;\n}\n\ninterface Implementations {\n  operators: Record<string, Operator>;\n  functions: Record<string, Fn>;\n  aggregates: Record<string, AggregateFn>;\n}\n\nexport class LanguageManager {\n  private langs: Record<string, Language> = {};\n  private static readonly allLangs = Symbol('allLangs');\n  private static readonly defaultSchema = Symbol('defaultSchema');\n  private implementations: Record<\n    string | (typeof LanguageManager)['allLangs'],\n    Record<string | (typeof LanguageManager)['defaultSchema'], Implementations>\n  > = {\n    [LanguageManager.allLangs]: {\n      [LanguageManager.defaultSchema]: {\n        operators: {},\n        functions: {},\n        aggregates: {},\n      },\n    },\n  };\n\n  public registerExtension(ext: Extension) {\n    const scope = ext.scope ?? ([LanguageManager.allLangs] as const);\n    const schema = ext.schema ?? LanguageManager.defaultSchema;\n\n    for (const lang of scope) {\n      makePath(this.implementations, lang, schema);\n      const ims = this.implementations[lang][schema];\n\n      for (const type of ['operators', 'functions', 'aggregates'] as const) {\n        ims[type] = (ims[type] as any) ?? {};\n        for (const item of ext[type]) {\n          ims[type][item.name] = item;\n        }\n      }\n    }\n  }\n\n  public registerLang(lang: Language) {\n    this.langs[lang.name.toLowerCase()] = lang;\n    this.registerExtension({ ...lang, scope: [lang.name] });\n  }\n\n  public getLang<Name extends string>(name: Name): Language<Name> {\n    return this.langs[name.toLowerCase()] as Language<Name>;\n  }\n\n  public getOp(lang: string, name: string, schema?: string): Operator {\n    return this.getImplementation('operators', lang, name, schema);\n  }\n  public getFn(lang: string, name: string, schema?: string): Fn {\n    return this.getImplementation('functions', lang, name, schema);\n  }\n  public getAggr(lang: string, name: string, schema?: string): AggregateFn {\n    return this.getImplementation('aggregates', lang, name, schema);\n  }\n\n  private getImplementation<T extends keyof Implementations>(\n    type: T,\n    lang: string,\n    name: string,\n    schema:\n      | string\n      | (typeof LanguageManager)['defaultSchema'] = LanguageManager.defaultSchema\n  ): Implementations[T][string] {\n    let impl = this.implementations[lang]?.[schema]?.[type][name];\n    impl =\n      impl ??\n      this.implementations[LanguageManager.allLangs][schema]?.[type][name];\n    return impl as Implementations[T][string];\n  }\n}\n","import { Operator } from '../extension.js';\n\nexport const add: Operator = {\n  name: '+',\n  impl: (a: any, b?: any) => (b === undefined ? +a : a + b),\n};\nexport const subtract: Operator = {\n  name: '-',\n  impl: (a: any, b?: any) => (b === undefined ? -a : a - b),\n};\nexport const multiply: Operator = {\n  name: '*',\n  impl: (a: any, b: any) => a * b,\n};\nexport const divide: Operator = {\n  name: '/',\n  impl: (a: any, b: any) => a / b,\n};\nexport const mod: Operator = {\n  name: '%',\n  impl: (a: any, b: any) => a % b,\n};\nexport const pow: Operator = {\n  name: '^',\n  impl: (a: any, b: any) => Math.pow(a, b),\n};\n","import { Operator } from '../extension.js';\nimport * as arithmetic from './arithmetic.js';\n\nexport const operators: Operator[] = [...Object.values(arithmetic)];\n","import { operators } from './operators/index.js';\n\nexport interface Operator {\n  name: string;\n  impl: (...args: any[]) => any;\n}\n\nexport interface Fn {\n  name: string;\n  impl: (...args: any[]) => any;\n}\n\nexport interface AggregateFn {\n  name: string;\n  init: () => any;\n  step: (acc: any, val: any) => any;\n  /**\n   * Optional inverse step function for speeding up window functions\n   */\n  stepInverse?: (acc: any, val: any) => any;\n  result: (acc: any) => any;\n}\n\nexport interface Extension<LangNames extends string = string> {\n  schema?: string;\n  operators: Operator[];\n  functions: Fn[];\n  aggregates: AggregateFn[];\n  scope?: LangNames[];\n}\n\nexport const core: Extension = {\n  operators: operators,\n  functions: [],\n  aggregates: [],\n};\n","import { Extension, core } from './extension.js';\nimport { Language, LanguageManager } from './lang-manager.js';\n\nexport class DortDB<LangNames extends string> {\n  private langMgr: LanguageManager;\n\n  constructor(private config: DortDBConfig<LangNames>) {\n    this.langMgr = new LanguageManager();\n    this.langMgr.registerExtension(core);\n    this.langMgr.registerLang(config.mainLang);\n    this.config.additionalLangs?.forEach((lang) =>\n      this.langMgr.registerLang(lang)\n    );\n    this.config.extensions?.forEach((e) => this.langMgr.registerExtension(e));\n  }\n\n  public parse(query: string) {\n    return this.langMgr\n      .getLang(this.config.mainLang.name)\n      .createParser(this.langMgr)\n      .parse(query);\n  }\n}\n\nexport interface DortDBConfig<LangNames extends string> {\n  mainLang: Language<LangNames>;\n  additionalLangs?: Language<LangNames>[];\n  extensions?: Extension<LangNames>[];\n}\n"],"names":["__publicField"],"mappings":"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"}